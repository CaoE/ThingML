import "datatypes.thingml" from stl

enumeration LogType as Byte {
	function_called = 0
	property_changed = 1
	message_lost = 2
	message_sent = 3
	message_handled = 4
}

thing fragment LogMsgs {	
	message log_on()
	message log_off()
	
	message log(payload : Byte[], size : UInt8) //payload[0]: 0=function, 1=variables, 2-4=events	
}

/*
 * Things we want to log needs to include WithLog 
 */
thing fragment WithBinaryLog includes LogMsgs {
	
	readonly property DEBUG_BIN_ID : Byte
		
	required port log @sync_send "true" {
		sends log
	}
	
}

/*
 * Generic proxy listening to things WithLog and forwarding to 
 */
thing fragment Logger includes LogMsgs {
	
	readonly property ACTIVATE_ON_STARTUP : Boolean
	readonly property HAS_SIGNED_BYTE : Boolean
	
	provided port log {
		receives log_on, log_off, log
	}
	
	abstract function do_log(payload : Byte[], size : UInt8)
		
	statechart init STARTUP {
		
		state STARTUP {
			
			transition -> ON
			guard ACTIVATE_ON_STARTUP
			
			transition -> OFF
			guard not ACTIVATE_ON_STARTUP
			
		}
		
		state ON {
			
			internal event d : log?log
			action do_log(d.payload, d.size)
						
			transition -> OFF
			event log?log_off
		}
		
		state OFF {
			transition -> ON
			event log?log_on
		}
		
	}
	
}

thing ConsoleLogger includes Logger @stdout_sync "true" {
	
	function do_log(payload : Byte[], size : UInt8) do
		readonly var log_type : Byte = payload[0]
		if (log_type == LogType:function_called)       print "log: function_called  ["
		else if (log_type == LogType:property_changed) print "log: property_changed ["
		else if (log_type == LogType:message_lost)     print "log: message_lost     ["
		else if (log_type == LogType:message_sent)     print "log: message_sent     ["
		else if (log_type == LogType:message_handled)  print "log: message_handled  ["
		else                                           print "log: unknown          ["		
		
		var i : UInt8 = 0
		while(i<size) do
			readonly var v : Byte = payload[i] 
			if (HAS_SIGNED_BYTE)
				print (``& v & ` & 0xFF`) as UInt8, ","
			else
				print v, ","
			i++
		end
		
		println "]"
	end
	
}