import "datatypes.thingml" from stl

thing fragment LogMsgs {	
	message log_on()
	message log_off()
	
	message log(payload : Byte[]) //payload[0]: 0=function, 1=variables, 2-4=events	
}

/*
 * Things we want to log needs to include WithLog 
 */
thing fragment WithBinaryLog includes LogMsgs {
	
	readonly property DEBUG_BIN_ID : Byte
		
	required port log @sync_send "true" {
		sends log
	}
	
}

/*
 * Generic proxy listening to things WithLog and forwarding to 
 */
thing fragment Logger includes LogMsgs {
	
	readonly property ACTIVATE_ON_STARTUP : Boolean
	
	provided port log {
		receives log_on, log_off, log
	}
	
	abstract function do_log(payload : Byte[])
		
	statechart init STARTUP {
		
		state STARTUP {
			
			transition -> ON
			guard ACTIVATE_ON_STARTUP
			
			transition -> OFF
			guard not ACTIVATE_ON_STARTUP
			
		}
		
		state ON {
			
			internal event d : log?log
			action do_log(d.payload)
						
			transition -> OFF
			event log?log_off
		}
		
		state OFF {
			transition -> ON
			event log?log_on
		}
		
	}
	
}

thing ConsoleLogger includes Logger @stdout_sync "true" {
	
	function do_log(payload : Byte[]) do
		readonly var log_type : Byte = payload[0]
		if (log_type == 0) print "log: function_called("
		else if (log_type == 1) print "log: property_changed("
		else if (log_type == 2) print "log: message_lost("
		else if (log_type == 3) print "log: message_sent("
		else if (log_type == 4) print "log: message_handled("
		else print "log: unknown("		
		for(v : Byte in payload) do
			print v, ","
		end
		println ")"
	end
	
}