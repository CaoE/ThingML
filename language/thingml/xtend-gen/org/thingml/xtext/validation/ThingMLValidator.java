/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 */
/**
 * generated by Xtext 2.10.0
 */
package org.thingml.xtext.validation;

import java.util.HashSet;
import java.util.LinkedList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.thingml.xtext.thingML.Thing;
import org.thingml.xtext.thingML.ThingMLPackage;
import org.thingml.xtext.validation.AbstractThingMLValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class ThingMLValidator extends AbstractThingMLValidator {
  /**
   * CUSTOM VALIDATION RULES FOR THINGS
   */
  @Check
  public void checkNoCyclesInThingIncludes(final Thing thing) {
    boolean _isEmpty = thing.getIncludes().isEmpty();
    if (_isEmpty) {
      return;
    }
    final HashSet<Thing> visitedThings = CollectionLiterals.<Thing>newHashSet(thing);
    LinkedList<Thing> toCheck = new LinkedList<Thing>();
    toCheck.addAll(thing.getIncludes());
    while ((!toCheck.isEmpty())) {
      {
        final Thing current = toCheck.pollFirst();
        boolean _contains = visitedThings.contains(current);
        if (_contains) {
          String _name = current.getName();
          String _plus = ("Cycle in the hierarchy of Thing \'" + _name);
          String _plus_1 = (_plus + "\'");
          this.error(_plus_1, ThingMLPackage.eINSTANCE.getThing_Includes());
          return;
        }
        visitedThings.add(current);
        EList<Thing> _includes = current.getIncludes();
        for (final Thing t : _includes) {
          boolean _contains_1 = toCheck.contains(t);
          boolean _not = (!_contains_1);
          if (_not) {
            toCheck.add(t);
          }
        }
      }
    }
  }
}
