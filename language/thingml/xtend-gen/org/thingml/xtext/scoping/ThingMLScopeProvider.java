/**
 * generated by Xtext 2.10.0
 */
package org.thingml.xtext.scoping;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.sintef.thingml.constraints.ThingMLHelpers;
import org.thingml.xtext.helpers.ConfigurationHelper;
import org.thingml.xtext.helpers.ThingMLElementHelper;
import org.thingml.xtext.scoping.AbstractThingMLScopeProvider;
import org.thingml.xtext.thingML.CompositeState;
import org.thingml.xtext.thingML.ConfigPropertyAssign;
import org.thingml.xtext.thingML.Configuration;
import org.thingml.xtext.thingML.Connector;
import org.thingml.xtext.thingML.Decrement;
import org.thingml.xtext.thingML.EnumLiteralRef;
import org.thingml.xtext.thingML.Enumeration;
import org.thingml.xtext.thingML.EnumerationLiteral;
import org.thingml.xtext.thingML.Event;
import org.thingml.xtext.thingML.EventReference;
import org.thingml.xtext.thingML.ExternalConnector;
import org.thingml.xtext.thingML.Function;
import org.thingml.xtext.thingML.Handler;
import org.thingml.xtext.thingML.Increment;
import org.thingml.xtext.thingML.Instance;
import org.thingml.xtext.thingML.Message;
import org.thingml.xtext.thingML.ParallelRegion;
import org.thingml.xtext.thingML.Parameter;
import org.thingml.xtext.thingML.Port;
import org.thingml.xtext.thingML.Property;
import org.thingml.xtext.thingML.PropertyAssign;
import org.thingml.xtext.thingML.PropertyReference;
import org.thingml.xtext.thingML.Protocol;
import org.thingml.xtext.thingML.ProvidedPort;
import org.thingml.xtext.thingML.ReceiveMessage;
import org.thingml.xtext.thingML.Region;
import org.thingml.xtext.thingML.RequiredPort;
import org.thingml.xtext.thingML.SendAction;
import org.thingml.xtext.thingML.Session;
import org.thingml.xtext.thingML.StartSession;
import org.thingml.xtext.thingML.State;
import org.thingml.xtext.thingML.Thing;
import org.thingml.xtext.thingML.ThingMLModel;
import org.thingml.xtext.thingML.ThingMLPackage;
import org.thingml.xtext.thingML.Transition;
import org.thingml.xtext.thingML.Type;
import org.thingml.xtext.thingML.Variable;
import org.thingml.xtext.thingML.VariableAssignment;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class ThingMLScopeProvider extends AbstractThingMLScopeProvider {
  private final ThingMLPackage p = ThingMLPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((Objects.equal(reference, this.p.getPort_Receives()) || Objects.equal(reference, this.p.getPort_Sends()))) {
      return this.scopeForPort_SendsReceives(((Port) context));
    } else {
      EReference _sendAction_Port = this.p.getSendAction_Port();
      boolean _equals = Objects.equal(reference, _sendAction_Port);
      if (_equals) {
        return this.scopeForSendAction_Port(((SendAction) context));
      } else {
        EReference _sendAction_Message = this.p.getSendAction_Message();
        boolean _equals_1 = Objects.equal(reference, _sendAction_Message);
        if (_equals_1) {
          return this.scopeForSendAction_Message(((SendAction) context));
        } else {
          EReference _configPropertyAssign_Property = this.p.getConfigPropertyAssign_Property();
          boolean _equals_2 = Objects.equal(reference, _configPropertyAssign_Property);
          if (_equals_2) {
            return this.scopeForConfigPropertyAssign_Property(((ConfigPropertyAssign) context));
          } else {
            if ((Objects.equal(reference, this.p.getConnector_Cli()) || Objects.equal(reference, this.p.getConnector_Srv()))) {
              return this.scopeForConnector_CliSrV(((Connector) context));
            } else {
              EReference _connector_Provided = this.p.getConnector_Provided();
              boolean _equals_3 = Objects.equal(reference, _connector_Provided);
              if (_equals_3) {
                return this.scopeForConnector_Provided(((Connector) context));
              } else {
                EReference _connector_Required = this.p.getConnector_Required();
                boolean _equals_4 = Objects.equal(reference, _connector_Required);
                if (_equals_4) {
                  return this.scopeForConnector_Required(((Connector) context));
                } else {
                  EReference _decrement_Var = this.p.getDecrement_Var();
                  boolean _equals_5 = Objects.equal(reference, _decrement_Var);
                  if (_equals_5) {
                    return this.scopeForDecrement_Var(((Decrement) context));
                  } else {
                    EReference _enumLiteralRef_Enum = this.p.getEnumLiteralRef_Enum();
                    boolean _equals_6 = Objects.equal(reference, _enumLiteralRef_Enum);
                    if (_equals_6) {
                      return this.scopeForEnumLiteralRef_Enum(((EnumLiteralRef) context));
                    } else {
                      EReference _enumLiteralRef_Literal = this.p.getEnumLiteralRef_Literal();
                      boolean _equals_7 = Objects.equal(reference, _enumLiteralRef_Literal);
                      if (_equals_7) {
                        return this.scopeForEnumLiteralRef_Literal(((EnumLiteralRef) context));
                      } else {
                        EReference _externalConnector_Port = this.p.getExternalConnector_Port();
                        boolean _equals_8 = Objects.equal(reference, _externalConnector_Port);
                        if (_equals_8) {
                          return this.scopeForExternalConnector_Port(((ExternalConnector) context));
                        } else {
                          EReference _externalConnector_Protocol = this.p.getExternalConnector_Protocol();
                          boolean _equals_9 = Objects.equal(reference, _externalConnector_Protocol);
                          if (_equals_9) {
                            return this.scopeForExternalConnector_Protocol(((ExternalConnector) context));
                          } else {
                            if ((Objects.equal(reference, this.p.getFunctionCallExpression_Function()) || Objects.equal(reference, this.p.getFunctionCallStatement_Function()))) {
                              return this.scopeForFunctionCallExpressionFunctionCallStatement_Function(context);
                            } else {
                              EReference _increment_Var = this.p.getIncrement_Var();
                              boolean _equals_10 = Objects.equal(reference, _increment_Var);
                              if (_equals_10) {
                                return this.scopeForIncrement_Var(((Increment) context));
                              } else {
                                EReference _instance_Type = this.p.getInstance_Type();
                                boolean _equals_11 = Objects.equal(reference, _instance_Type);
                                if (_equals_11) {
                                  return this.scopeForInstance_Type(((Instance) context));
                                } else {
                                  EReference _propertyAssign_Property = this.p.getPropertyAssign_Property();
                                  boolean _equals_12 = Objects.equal(reference, _propertyAssign_Property);
                                  if (_equals_12) {
                                    return this.scopeForPropertyAssign_Property(((PropertyAssign) context));
                                  } else {
                                    EReference _propertyReference_Property = this.p.getPropertyReference_Property();
                                    boolean _equals_13 = Objects.equal(reference, _propertyReference_Property);
                                    if (_equals_13) {
                                      return this.scopeForPropertyReference_Property(((PropertyReference) context));
                                    } else {
                                      EReference _receiveMessage_Port = this.p.getReceiveMessage_Port();
                                      boolean _equals_14 = Objects.equal(reference, _receiveMessage_Port);
                                      if (_equals_14) {
                                        return this.scopeForReceiveMessage_Port(((ReceiveMessage) context));
                                      } else {
                                        EReference _receiveMessage_Message = this.p.getReceiveMessage_Message();
                                        boolean _equals_15 = Objects.equal(reference, _receiveMessage_Message);
                                        if (_equals_15) {
                                          return this.scopeForReceiveMessage_Message(((ReceiveMessage) context));
                                        } else {
                                          EReference _startSession_Session = this.p.getStartSession_Session();
                                          boolean _equals_16 = Objects.equal(reference, _startSession_Session);
                                          if (_equals_16) {
                                            return this.scopeForStartSession_Session(((StartSession) context));
                                          } else {
                                            EReference _thing_Includes = this.p.getThing_Includes();
                                            boolean _equals_17 = Objects.equal(reference, _thing_Includes);
                                            if (_equals_17) {
                                              return this.scopeForThing_Includes(((Thing) context));
                                            } else {
                                              EReference _transition_Target = this.p.getTransition_Target();
                                              boolean _equals_18 = Objects.equal(reference, _transition_Target);
                                              if (_equals_18) {
                                                return this.scopeForTransition_Target(((Transition) context));
                                              } else {
                                                EReference _typeRef_Type = this.p.getTypeRef_Type();
                                                boolean _equals_19 = Objects.equal(reference, _typeRef_Type);
                                                if (_equals_19) {
                                                  return this.scopeForTypeRef_Type(context);
                                                } else {
                                                  EReference _variableAssignment_Property = this.p.getVariableAssignment_Property();
                                                  boolean _equals_20 = Objects.equal(reference, _variableAssignment_Property);
                                                  if (_equals_20) {
                                                    return this.scopeForVariableAssignment_Property(((VariableAssignment) context));
                                                  } else {
                                                    EReference _region_Initial = this.p.getRegion_Initial();
                                                    boolean _equals_21 = Objects.equal(reference, _region_Initial);
                                                    if (_equals_21) {
                                                      return this.scopeForRegion_Initial(((Region) context));
                                                    } else {
                                                      EReference _eventReference_ReceiveMsg = this.p.getEventReference_ReceiveMsg();
                                                      boolean _equals_22 = Objects.equal(reference, _eventReference_ReceiveMsg);
                                                      if (_equals_22) {
                                                        return this.scopeForEventReference_ReceiveMsg(((EventReference) context));
                                                      } else {
                                                        EReference _eventReference_Parameter = this.p.getEventReference_Parameter();
                                                        boolean _equals_23 = Objects.equal(reference, _eventReference_Parameter);
                                                        if (_equals_23) {
                                                          return this.scopeForEventReference_Parameter(((EventReference) context));
                                                        } else {
                                                          EReference _startSession_Session_1 = this.p.getStartSession_Session();
                                                          boolean _equals_24 = Objects.equal(reference, _startSession_Session_1);
                                                          if (_equals_24) {
                                                            return this.scopeForStartSession_Session(((StartSession) context));
                                                          } else {
                                                            if ((((Objects.equal(reference, this.p.getConfigPropertyAssign_Instance()) || Objects.equal(reference, this.p.getConnector_Cli())) || Objects.equal(reference, this.p.getConnector_Srv())) || Objects.equal(reference, this.p.getExternalConnector_Inst()))) {
                                                              Configuration _findContainingConfiguration = ThingMLElementHelper.findContainingConfiguration(context);
                                                              return this.scopeForConfigurationInstances(_findContainingConfiguration);
                                                            } else {
                                                              String _name = reference.getName();
                                                              String _plus = ("INFO: Resolving reference : " + _name);
                                                              String _plus_1 = (_plus + " in Class ");
                                                              EObject _eContainer = reference.eContainer();
                                                              String _name_1 = ((ENamedElement) _eContainer).getName();
                                                              String _plus_2 = (_plus_1 + _name_1);
                                                              System.out.println(_plus_2);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Scopes.scopeFor(this.EMPTY);
  }
  
  protected ArrayList EMPTY = new ArrayList<Object>();
  
  protected IScope scopeForConfigurationInstances(final Configuration context) {
    Set<Instance> _allInstances = ConfigurationHelper.allInstances(context);
    return Scopes.scopeFor(_allInstances);
  }
  
  protected IScope scopeForSession_Initial(final Session context) {
    EList<State> _substate = context.getSubstate();
    return Scopes.scopeFor(_substate);
  }
  
  protected IScope scopeForEventReference_ReceiveMsg(final EventReference context) {
    IScope _xblockexpression = null;
    {
      Handler h = ThingMLHelpers.findContainingHandler(context);
      IScope _xifexpression = null;
      boolean _equals = Objects.equal(h, null);
      if (_equals) {
        _xifexpression = Scopes.scopeFor(this.EMPTY);
      } else {
        EList<Event> _event = h.getEvent();
        _xifexpression = Scopes.scopeFor(_event);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected IScope scopeForEventReference_Parameter(final EventReference context) {
    IScope _xifexpression = null;
    if (((!Objects.equal(context.getReceiveMsg(), null)) && (context.getReceiveMsg() instanceof ReceiveMessage))) {
      Event _receiveMsg = context.getReceiveMsg();
      Message _message = ((ReceiveMessage) _receiveMsg).getMessage();
      EList<Parameter> _parameters = _message.getParameters();
      _xifexpression = Scopes.scopeFor(_parameters);
    } else {
      _xifexpression = Scopes.scopeFor(this.EMPTY);
    }
    return _xifexpression;
  }
  
  protected IScope scopeForRegion_Initial(final Region context) {
    if ((context instanceof ParallelRegion)) {
      EList<State> _substate = ((ParallelRegion)context).getSubstate();
      return Scopes.scopeFor(_substate);
    }
    if ((context instanceof CompositeState)) {
      EList<State> _substate_1 = ((CompositeState)context).getSubstate();
      return Scopes.scopeFor(_substate_1);
    }
    if ((context instanceof Session)) {
      EList<State> _substate_2 = ((Session)context).getSubstate();
      return Scopes.scopeFor(_substate_2);
    }
    return null;
  }
  
  protected IScope scopeForParallelRegion_Initial(final ParallelRegion context) {
    EList<State> _substate = context.getSubstate();
    return Scopes.scopeFor(_substate);
  }
  
  protected IScope scopeForPort_SendsReceives(final Port context) {
    EObject _eContainer = context.eContainer();
    ArrayList<Message> _allMessages = ThingMLHelpers.allMessages(((Thing) _eContainer));
    return Scopes.scopeFor(_allMessages);
  }
  
  protected IScope scopeForSendAction_Port(final SendAction context) {
    Thing _findContainingThing = ThingMLHelpers.findContainingThing(context);
    ArrayList<Port> _allPorts = ThingMLHelpers.allPorts(_findContainingThing);
    return Scopes.scopeFor(_allPorts);
  }
  
  protected IScope scopeForSendAction_Message(final SendAction context) {
    Port _port = context.getPort();
    EList<Message> _sends = _port.getSends();
    return Scopes.scopeFor(_sends);
  }
  
  protected IScope scopeForConfigPropertyAssign_Property(final ConfigPropertyAssign context) {
    Instance _instance = context.getInstance();
    Thing _type = _instance.getType();
    ArrayList<Property> _allProperties = ThingMLHelpers.allProperties(_type);
    return Scopes.scopeFor(_allProperties);
  }
  
  protected IScope scopeForConnector_CliSrV(final Connector context) {
    EObject _eContainer = context.eContainer();
    Set<Instance> _allInstances = ConfigurationHelper.allInstances(((Configuration) _eContainer));
    return Scopes.scopeFor(_allInstances);
  }
  
  protected IScope scopeForConnector_Provided(final Connector context) {
    Instance _srv = context.getSrv();
    Thing _type = _srv.getType();
    ArrayList<ProvidedPort> _allProvidedPorts = ThingMLHelpers.allProvidedPorts(_type);
    return Scopes.scopeFor(_allProvidedPorts);
  }
  
  protected IScope scopeForConnector_Required(final Connector context) {
    Instance _cli = context.getCli();
    Thing _type = _cli.getType();
    ArrayList<RequiredPort> _allRequiredPorts = ThingMLHelpers.allRequiredPorts(_type);
    return Scopes.scopeFor(_allRequiredPorts);
  }
  
  protected IScope scopeForDecrement_Var(final Decrement context) {
    ArrayList<Variable> _allVisibleVariables = ThingMLHelpers.allVisibleVariables(context);
    return Scopes.scopeFor(_allVisibleVariables);
  }
  
  protected IScope scopeForEnumLiteralRef_Enum(final EnumLiteralRef context) {
    ThingMLModel _findContainingModel = ThingMLHelpers.findContainingModel(context);
    ArrayList<Enumeration> _allEnnumerations = ThingMLHelpers.allEnnumerations(_findContainingModel);
    return Scopes.scopeFor(_allEnnumerations);
  }
  
  protected IScope scopeForEnumLiteralRef_Literal(final EnumLiteralRef context) {
    Enumeration _enum = context.getEnum();
    EList<EnumerationLiteral> _literals = _enum.getLiterals();
    return Scopes.scopeFor(_literals);
  }
  
  protected IScope scopeForExternalConnector_Port(final ExternalConnector context) {
    Instance _inst = context.getInst();
    Thing _type = _inst.getType();
    ArrayList<Port> _allPorts = ThingMLHelpers.allPorts(_type);
    return Scopes.scopeFor(_allPorts);
  }
  
  protected IScope scopeForExternalConnector_Protocol(final ExternalConnector context) {
    ThingMLModel _findContainingModel = ThingMLHelpers.findContainingModel(context);
    ArrayList<Protocol> _allProtocols = ThingMLHelpers.allProtocols(_findContainingModel);
    return Scopes.scopeFor(_allProtocols);
  }
  
  protected IScope scopeForFunctionCallExpressionFunctionCallStatement_Function(final EObject context) {
    Thing _findContainingThing = ThingMLHelpers.findContainingThing(context);
    ArrayList<Function> _allFunctions = ThingMLHelpers.allFunctions(_findContainingThing);
    return Scopes.scopeFor(_allFunctions);
  }
  
  protected IScope scopeForIncrement_Var(final Increment context) {
    ArrayList<Variable> _allVisibleVariables = ThingMLHelpers.allVisibleVariables(context);
    return Scopes.scopeFor(_allVisibleVariables);
  }
  
  protected IScope scopeForInstance_Type(final Instance context) {
    ThingMLModel _findContainingModel = ThingMLHelpers.findContainingModel(context);
    ArrayList<Thing> _allThings = ThingMLHelpers.allThings(_findContainingModel);
    return Scopes.scopeFor(_allThings);
  }
  
  protected IScope scopeForPropertyAssign_Property(final PropertyAssign context) {
    IScope _xblockexpression = null;
    {
      final StartSession ss = ThingMLHelpers.findContainingStartSession(context);
      boolean _notEquals = (!Objects.equal(ss, null));
      if (_notEquals) {
        Session _session = ss.getSession();
        EList<Property> _properties = _session.getProperties();
        return Scopes.scopeFor(_properties);
      }
      final Thing t = ThingMLHelpers.findContainingThing(context);
      boolean _notEquals_1 = (!Objects.equal(t, null));
      if (_notEquals_1) {
        ArrayList<Property> _allProperties = ThingMLHelpers.allProperties(t);
        return Scopes.scopeFor(_allProperties);
      }
      final Instance i = ThingMLHelpers.findContainingInstance(context);
      boolean _notEquals_2 = (!Objects.equal(i, null));
      if (_notEquals_2) {
        Thing _type = i.getType();
        ArrayList<Property> _allProperties_1 = ThingMLHelpers.allProperties(_type);
        return Scopes.scopeFor(_allProperties_1);
      }
      _xblockexpression = Scopes.scopeFor(this.EMPTY);
    }
    return _xblockexpression;
  }
  
  protected IScope scopeForPropertyReference_Property(final PropertyReference context) {
    ArrayList<Variable> _allVisibleVariables = ThingMLHelpers.allVisibleVariables(context);
    return Scopes.scopeFor(_allVisibleVariables);
  }
  
  protected IScope scopeForReceiveMessage_Port(final ReceiveMessage context) {
    Thing _findContainingThing = ThingMLHelpers.findContainingThing(context);
    ArrayList<Port> _allPorts = ThingMLHelpers.allPorts(_findContainingThing);
    return Scopes.scopeFor(_allPorts);
  }
  
  protected IScope scopeForReceiveMessage_Message(final ReceiveMessage context) {
    Port _port = context.getPort();
    EList<Message> _receives = _port.getReceives();
    return Scopes.scopeFor(_receives);
  }
  
  protected IScope scopeForReference_Reference(final EObject context) {
    return Scopes.scopeFor(this.EMPTY);
  }
  
  protected IScope scopeForStartSession_Session(final StartSession context) {
    ArrayList<Session> _allVisibleSessions = ThingMLHelpers.allVisibleSessions(context);
    return Scopes.scopeFor(_allVisibleSessions);
  }
  
  protected IScope scopeForThing_Includes(final Thing context) {
    ThingMLModel _findContainingModel = ThingMLHelpers.findContainingModel(context);
    ArrayList<Thing> _allThings = ThingMLHelpers.allThings(_findContainingModel);
    return Scopes.scopeFor(_allThings);
  }
  
  protected IScope scopeForTransition_Target(final Transition context) {
    EObject _eContainer = context.eContainer();
    ArrayList<State> _allValidTargetStates = ThingMLHelpers.allValidTargetStates(((State) _eContainer));
    return Scopes.scopeFor(_allValidTargetStates);
  }
  
  protected IScope scopeForTypeRef_Type(final EObject context) {
    ThingMLModel _findContainingModel = ThingMLHelpers.findContainingModel(context);
    ArrayList<Type> _allTypes = ThingMLHelpers.allTypes(_findContainingModel);
    return Scopes.scopeFor(_allTypes);
  }
  
  protected IScope scopeForVariableAssignment_Property(final VariableAssignment context) {
    ArrayList<Variable> _allVisibleVariables = ThingMLHelpers.allVisibleVariables(context);
    return Scopes.scopeFor(_allVisibleVariables);
  }
}
