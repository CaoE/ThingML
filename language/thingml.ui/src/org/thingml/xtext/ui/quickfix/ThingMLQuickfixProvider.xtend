/*
 * generated by Xtext 2.10.0
 */
package org.thingml.xtext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.thingml.xtext.constraints.ThingMLHelpers
import org.thingml.xtext.thingML.Configuration
import org.thingml.xtext.thingML.Connector
import org.thingml.xtext.thingML.ExternalConnector
import org.thingml.xtext.thingML.RequiredPort

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class ThingMLQuickfixProvider extends DefaultQuickfixProvider
 {

	@Fix("state-sink")
	def makeStateFinal(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make state final",
			"Change state "+issue.data.get(0)+" to a final state",
			"" // Image
		)[ context | 
			context.xtextDocument.replace(issue.offset, 0, "final ")
		]
	}
	
	@Fix("type-cast")
	def cast(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Cast to " + issue.data.get(0),
			"Cast this expression to " + issue.data.get(0),
			"" // Image
		)[ context | 
			context.xtextDocument.replace(issue.offset + issue.length, 0, " as " + issue.data.get(0))
		]
	}
	
	@Fix("required-ports-not-connected")
	def makeOptional(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make port " + issue.data.get(0) + " optional",
			"Make port " + issue.data.get(0) + " optional",
			"" // Image
		)[ obj, context | 
			if (obj instanceof Configuration) {
				val cfg = obj as Configuration
				val iName = issue.data.get(0).split("/").get(0)
				val i = cfg.instances.findFirst[i | i.name == iName]
				val pName = issue.data.get(0).split("/").get(1) //FIXME: for some reasons, issue.data.get(1) did not work...								
				val p = ThingMLHelpers.allPorts(i.type).findFirst[p | p instanceof RequiredPort && !(p as RequiredPort).optional && p.name == pName] as RequiredPort
				p.optional = true
			}
		]
	}
	
	@Fix("fragment-instanciation")
	def makeConcrete(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Make thing " + issue.data.get(0) + " concrete",
			"Make thing " + issue.data.get(0) + " concrete",
			"" // Image
		)[ obj, context | 
			if (obj instanceof Configuration) {
				val cfg = obj as Configuration
				val iName = issue.data.get(0)
				val i = cfg.instances.findFirst[i | i.name == iName]
				i.type.fragment = false				
			}
		]
	}
	
	@Fix("fragment-instanciation")
	def removeInstance(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Remove instance " + issue.data.get(0),
			"Remove instance " + issue.data.get(0),
			"" // Image
		)[ obj, context | 
			if (obj instanceof Configuration) {
				val cfg = obj as Configuration
				val iName = issue.data.get(0)
				val i = cfg.instances.findFirst[i | i.name == iName]
				val toBeRemoved = cfg.connectors.filter[ c |
					if (c instanceof ExternalConnector) {
						val ec = c as ExternalConnector
						return ec.inst == i
					} else {
						val conn = c as Connector
						return conn.cli == i || conn.srv == i
					}
				]
				cfg.connectors.removeAll(toBeRemoved)
				cfg.instances.remove(i)
			}
		]
	}	
}
