module org.thingml.xtext.GenerateThingML

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.generator.adapter.*


var grammarURI = "classpath:/org/thingml/xtext/ThingML.xtext"
var file.extensions = "thingml"
var projectName = "org.thingml.xtext.ThingML"
var runtimeProject = "../${projectName}"
var lineDelimiter = '\n'

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.thingml.xtext"
				rootPath = rootPath
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		
		/*
		language = StandardLanguage {
			name = "org.thingml.xtext.ThingML"
			fileExtensions = "thingml"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
		*/
		
		language = XtextGeneratorLanguage {
	        name = "org.thingml.xtext.ThingML"
	        fileExtensions = "thingml"
	        referencedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
	     
	        fragment = grammarAccess.GrammarAccessFragment2 {}
	        fragment = ecore.EMFGeneratorFragment2 {}
	        fragment = serializer.SerializerFragment2 {}
	        fragment = resourceFactory.ResourceFactoryFragment2 {}
	        fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}
	        fragment = validation.ValidatorFragment2 {
	        	//composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
	        }
	        
	        //fragment = adapter.FragmentAdapter {
   			//	fragment = scoping.ImportURIScopingFragment {}
			//}
	         
	        fragment = scoping.ImportNamespacesScopingFragment2 {}
	        
	        //fragment = exporting.QualifiedNamesFragment2 {}
	        fragment = exporting.SimpleNamesFragment2 {}
	        
	        fragment = builder.BuilderIntegrationFragment2 {}
	        fragment = generator.GeneratorFragment2 {}
	        fragment = formatting.Formatter2Fragment2 {}
	        fragment = ui.labeling.LabelProviderFragment2 {}
	        fragment = ui.outline.QuickOutlineFragment2 {}
	        fragment = ui.outline.OutlineTreeProviderFragment2 {}
	        fragment = ui.quickfix.QuickfixProviderFragment2 {}
	        fragment = ui.contentAssist.ContentAssistFragment2 {}
	        fragment = junit.Junit4Fragment2 {}
	        fragment = ui.refactoring.RefactorElementNameFragment2 {}
	        
	        fragment = types.TypesGeneratorFragment2 {}
	        
	        fragment = xbase.XtypeGeneratorFragment2 {}
	        fragment = xbase.XbaseGeneratorFragment2 {}
	        
	        fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
	        fragment = ui.compare.CompareFragment2 {}
	        fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {}
	        fragment = idea.IdeaPluginGenerator {}
	        fragment = web.WebIntegrationFragment {
	            framework = "Ace"
	        }
	    }
		
	}
}
