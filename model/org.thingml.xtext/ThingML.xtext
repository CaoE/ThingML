// automatically generated by Xtext
grammar org.thingml.xtext.ThingML with org.eclipse.xtext.common.Terminals

import "http://thingml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ThingMLModel returns ThingMLModel:
	{ThingMLModel}
	'ThingMLModel'
	'{'
		('imports' '(' imports+=[ThingMLModel|EString] ( "," imports+=[ThingMLModel|EString])* ')' )?
		('types' '{' types+=Type ( "," types+=Type)* '}' )?
		('configs' '{' configs+=Configuration ( "," configs+=Configuration)* '}' )?
		('protocols' '{' protocols+=Protocol ( "," protocols+=Protocol)* '}' )?
	'}';

Type returns Type:
	Thing | Enumeration | PrimitiveType | ObjectType;





AbstractConnector returns AbstractConnector:
	Connector | ExternalConnector;



Port returns Port:
	RequiredPort | ProvidedPort | InternalPort;








Expression returns Expression:
	ExternExpression | EnumLiteralRef | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral | NotExpression | UnaryMinus | PlusExpression | MinusExpression | TimesExpression | DivExpression | ModExpression | EqualsExpression | NotEqualsExpression | GreaterExpression | LowerExpression | GreaterOrEqualExpression | LowerOrEqualExpression | AndExpression | OrExpression | PropertyReference | ArrayIndex | ExpressionGroup | FunctionCallExpression | MessageParameter | Reference;


Action returns Action:
	ActionBlock | ExternStatement | SendAction | VariableAssignment | Increment | Decrement | LoopAction | ConditionalAction | ReturnAction | PrintAction | ErrorAction | StartSession | FunctionCallStatement | LocalVariable;


State returns State:
	State_Impl | StateMachine | FinalState | CompositeState_Impl | Session;





Source returns Source:
	JoinSources | MergeSources | SimpleSource;


Variable returns Variable:
	Parameter | Property | LocalVariable;

ReferencedElmt returns ReferencedElmt:
	Message | Parameter | Property | ReceiveMessage | LocalVariable | JoinSources | MergeSources | SimpleSource | MessageParameter;

ElmtProperty returns ElmtProperty:
	SimpleParamRef | ArrayParamRef | LengthArray;

ViewSource returns ViewSource:
	Filter | LengthWindow | TimeWindow;


Event returns Event:
	ReceiveMessage;





Configuration returns Configuration:
	{Configuration}
	'Configuration'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('instances' '{' instances+=Instance ( "," instances+=Instance)* '}' )?
		('connectors' '{' connectors+=AbstractConnector ( "," connectors+=AbstractConnector)* '}' )?
		('propassigns' '{' propassigns+=ConfigPropertyAssign ( "," propassigns+=ConfigPropertyAssign)* '}' )?
	'}';

Protocol returns Protocol:
	{Protocol}
	'Protocol'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

PlatformAnnotation returns PlatformAnnotation:
	'PlatformAnnotation'
	name=EString
	'{'
		'value' value=EString
	'}';

Thing returns Thing:
	{Thing}
	(^fragment?='fragment')?
	'Thing'
	name=EString
	'{'
		('includes' '(' includes+=[Thing|EString] ( "," includes+=[Thing|EString])* ')' )?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('ports' '{' ports+=Port ( "," ports+=Port)* '}' )?
		('behaviour' '{' behaviour+=StateMachine ( "," behaviour+=StateMachine)* '}' )?
		('assign' '{' assign+=PropertyAssign ( "," assign+=PropertyAssign)* '}' )?
		('messages' '{' messages+=Message ( "," messages+=Message)* '}' )?
		('functions' '{' functions+=Function ( "," functions+=Function)* '}' )?
		('streams' '{' streams+=Stream ( "," streams+=Stream)* '}' )?
	'}';

Enumeration returns Enumeration:
	{Enumeration}
	'Enumeration'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('literals' '{' literals+=EnumerationLiteral ( "," literals+=EnumerationLiteral)* '}' )?
	'}';

PrimitiveType returns PrimitiveType:
	'PrimitiveType'
	name=EString
	'{'
		'ByteSize' ByteSize=EInt
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

ObjectType returns ObjectType:
	{ObjectType}
	'ObjectType'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

Property returns Property:
	'Property'
	name=EString
	'{'
		('isArray' isArray=EBoolean)?
		('changeable' changeable=EBoolean)?
		'type' type=[Type|EString]
		('cardinality' cardinality=Expression)?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('init' init=Expression)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

StateMachine returns StateMachine:
	(history?='history')?
	'StateMachine'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		'initial' initial=[State|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('outgoing' '{' outgoing+=Transition ( "," outgoing+=Transition)* '}' )?
		('entry' entry=Action)?
		('exit' exit=Action)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('internal' '{' internal+=InternalTransition ( "," internal+=InternalTransition)* '}' )?
		('substate' '{' substate+=State ( "," substate+=State)* '}' )?
		('region' '{' region+=ParallelRegion ( "," region+=ParallelRegion)* '}' )?
	'}';

PropertyAssign returns PropertyAssign:
	'PropertyAssign'
	name=EString
	'{'
		'property' property=[Property|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		'init' init=Expression
		('index' '{' index+=Expression ( "," index+=Expression)* '}' )?
	'}';

Message returns Message:
	{Message}
	'Message'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Function returns Function:
	'Function'
	name=EString
	'{'
		('isArray' isArray=EBoolean)?
		'type' type=[Type|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('cardinality' cardinality=Expression)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		'body' body=Action
	'}';

Stream returns Stream:
	'Stream'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('selection' '{' selection+=LocalVariable ( "," selection+=LocalVariable)* '}' )?
		'output' output=SendAction
		'input' input=Source
	'}';

ExternExpression returns ExternExpression:
	'ExternExpression'
	'{'
		'expression' expression=EString
		('segments' '{' segments+=Expression ( "," segments+=Expression)* '}' )?
	'}';

EnumLiteralRef returns EnumLiteralRef:
	'EnumLiteralRef'
	'{'
		'enum' ^enum=[Enumeration|EString]
		'literal' literal=[EnumerationLiteral|EString]
	'}';

IntegerLiteral returns IntegerLiteral:
	'IntegerLiteral'
	'{'
		'intValue' intValue=EInt
	'}';

BooleanLiteral returns BooleanLiteral:
	boolValue?='boolValue'
	'BooleanLiteral'
	;

StringLiteral returns StringLiteral:
	'StringLiteral'
	'{'
		'stringValue' stringValue=EString
	'}';

DoubleLiteral returns DoubleLiteral:
	'DoubleLiteral'
	'{'
		'doubleValue' doubleValue=EDouble
	'}';

NotExpression returns NotExpression:
	'NotExpression'
	'{'
		'term' term=Expression
	'}';

UnaryMinus returns UnaryMinus:
	'UnaryMinus'
	'{'
		'term' term=Expression
	'}';

PlusExpression returns PlusExpression:
	'PlusExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

MinusExpression returns MinusExpression:
	'MinusExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

TimesExpression returns TimesExpression:
	'TimesExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

DivExpression returns DivExpression:
	'DivExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

ModExpression returns ModExpression:
	'ModExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

EqualsExpression returns EqualsExpression:
	'EqualsExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

NotEqualsExpression returns NotEqualsExpression:
	'NotEqualsExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

GreaterExpression returns GreaterExpression:
	'GreaterExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

LowerExpression returns LowerExpression:
	'LowerExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

GreaterOrEqualExpression returns GreaterOrEqualExpression:
	'GreaterOrEqualExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

LowerOrEqualExpression returns LowerOrEqualExpression:
	'LowerOrEqualExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

AndExpression returns AndExpression:
	'AndExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

OrExpression returns OrExpression:
	'OrExpression'
	'{'
		'lhs' lhs=Expression
		'rhs' rhs=Expression
	'}';

PropertyReference returns PropertyReference:
	'PropertyReference'
	'{'
		'property' property=[Variable|EString]
	'}';

ArrayIndex returns ArrayIndex:
	'ArrayIndex'
	'{'
		'array' array=Expression
		'index' index=Expression
	'}';

ExpressionGroup returns ExpressionGroup:
	'ExpressionGroup'
	'{'
		'exp' exp=Expression
	'}';

FunctionCallExpression returns FunctionCallExpression:
	'FunctionCallExpression'
	'{'
		'function' function=[Function|EString]
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

MessageParameter returns MessageParameter:
	'MessageParameter'
	name=EString
	'{'
		'msgRef' msgRef=[Message|EString]
	'}';

Reference returns Reference:
	'Reference'
	'{'
		'reference' reference=[ReferencedElmt|EString]
		'parameter' parameter=ElmtProperty
	'}';

EnumerationLiteral returns EnumerationLiteral:
	{EnumerationLiteral}
	'EnumerationLiteral'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Parameter returns Parameter:
	'Parameter'
	name=EString
	'{'
		('isArray' isArray=EBoolean)?
		'type' type=[Type|EString]
		('cardinality' cardinality=Expression)?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

LocalVariable returns LocalVariable:
	'LocalVariable'
	name=EString
	'{'
		('isArray' isArray=EBoolean)?
		('changeable' changeable=EBoolean)?
		'type' type=[Type|EString]
		('cardinality' cardinality=Expression)?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('init' init=Expression)?
	'}';

ReceiveMessage returns ReceiveMessage:
	'ReceiveMessage'
	name=EString
	'{'
		'message' message=[Message|EString]
		'port' port=[Port|EString]
	'}';

JoinSources returns JoinSources:
	'JoinSources'
	name=EString
	'{'
		'resultMessage' resultMessage=[Message|EString]
		('operators' '{' operators+=ViewSource ( "," operators+=ViewSource)* '}' )?
		'sources' '{' sources+=Source ( "," sources+=Source)* '}' 
		('rules' '{' rules+=Expression ( "," rules+=Expression)* '}' )?
	'}';

MergeSources returns MergeSources:
	'MergeSources'
	name=EString
	'{'
		'resultMessage' resultMessage=[Message|EString]
		('operators' '{' operators+=ViewSource ( "," operators+=ViewSource)* '}' )?
		'sources' '{' sources+=Source ( "," sources+=Source)* '}' 
	'}';

SimpleSource returns SimpleSource:
	'SimpleSource'
	name=EString
	'{'
		('operators' '{' operators+=ViewSource ( "," operators+=ViewSource)* '}' )?
		'message' message=ReceiveMessage
	'}';

Filter returns Filter:
	'Filter'
	'{'
		'guard' guard=Expression
	'}';

LengthWindow returns LengthWindow:
	'LengthWindow'
	'{'
		'size' size=Expression
		('step' step=Expression)?
	'}';

TimeWindow returns TimeWindow:
	'TimeWindow'
	'{'
		'duration' duration=Expression
		('step' step=Expression)?
	'}';

SimpleParamRef returns SimpleParamRef:
	'SimpleParamRef'
	'{'
		'parameterRef' parameterRef=[Parameter|EString]
	'}';

ArrayParamRef returns ArrayParamRef:
	'ArrayParamRef'
	'{'
		'parameterRef' parameterRef=[Parameter|EString]
	'}';

LengthArray returns LengthArray:
	{LengthArray}
	'LengthArray'
	;

RequiredPort returns RequiredPort:
	{RequiredPort}
	(optional?='optional')?
	'RequiredPort'
	name=EString
	'{'
		('receives' '(' receives+=[Message|EString] ( "," receives+=[Message|EString])* ')' )?
		('sends' '(' sends+=[Message|EString] ( "," sends+=[Message|EString])* ')' )?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

ProvidedPort returns ProvidedPort:
	{ProvidedPort}
	'ProvidedPort'
	name=EString
	'{'
		('receives' '(' receives+=[Message|EString] ( "," receives+=[Message|EString])* ')' )?
		('sends' '(' sends+=[Message|EString] ( "," sends+=[Message|EString])* ')' )?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

InternalPort returns InternalPort:
	{InternalPort}
	'InternalPort'
	name=EString
	'{'
		('receives' '(' receives+=[Message|EString] ( "," receives+=[Message|EString])* ')' )?
		('sends' '(' sends+=[Message|EString] ( "," sends+=[Message|EString])* ')' )?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

Transition returns Transition:
	'Transition'
	name=EString
	'{'
		'target' target=[State|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('event' '{' event+=Event ( "," event+=Event)* '}' )?
		('guard' guard=Expression)?
		('action' action=Action)?
	'}';

InternalTransition returns InternalTransition:
	{InternalTransition}
	'InternalTransition'
	name=EString
	'{'
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('event' '{' event+=Event ( "," event+=Event)* '}' )?
		('guard' guard=Expression)?
		('action' action=Action)?
	'}';

State_Impl returns State:
	{State}
	'State'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('outgoing' '{' outgoing+=Transition ( "," outgoing+=Transition)* '}' )?
		('entry' entry=Action)?
		('exit' exit=Action)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('internal' '{' internal+=InternalTransition ( "," internal+=InternalTransition)* '}' )?
	'}';

ParallelRegion returns ParallelRegion:
	(history?='history')?
	'ParallelRegion'
	name=EString
	'{'
		'initial' initial=[State|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('substate' '{' substate+=State ( "," substate+=State)* '}' )?
	'}';

ActionBlock returns ActionBlock:
	{ActionBlock}
	'ActionBlock'
	'{'
		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
	'}';

ExternStatement returns ExternStatement:
	'ExternStatement'
	'{'
		'statement' statement=EString
		('segments' '{' segments+=Expression ( "," segments+=Expression)* '}' )?
	'}';

SendAction returns SendAction:
	'SendAction'
	'{'
		'message' message=[Message|EString]
		'port' port=[Port|EString]
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

VariableAssignment returns VariableAssignment:
	'VariableAssignment'
	'{'
		'property' property=[Variable|EString]
		'expression' expression=Expression
		('index' '{' index+=Expression ( "," index+=Expression)* '}' )?
	'}';

Increment returns Increment:
	'Increment'
	'{'
		'var' var=[Variable|EString]
	'}';

Decrement returns Decrement:
	'Decrement'
	'{'
		'var' var=[Variable|EString]
	'}';

LoopAction returns LoopAction:
	'LoopAction'
	'{'
		'action' action=Action
		'condition' condition=Expression
	'}';

ConditionalAction returns ConditionalAction:
	'ConditionalAction'
	'{'
		'action' action=Action
		'condition' condition=Expression
		('elseAction' elseAction=Action)?
	'}';

ReturnAction returns ReturnAction:
	'ReturnAction'
	'{'
		'exp' exp=Expression
	'}';

PrintAction returns PrintAction:
	'PrintAction'
	'{'
		'msg' msg=Expression
	'}';

ErrorAction returns ErrorAction:
	'ErrorAction'
	'{'
		'msg' msg=Expression
	'}';

StartSession returns StartSession:
	'StartSession'
	'{'
		'session' session=[Session|EString]
		('constructor' '{' constructor+=PropertyAssign ( "," constructor+=PropertyAssign)* '}' )?
	'}';

FunctionCallStatement returns FunctionCallStatement:
	'FunctionCallStatement'
	'{'
		'function' function=[Function|EString]
		('parameters' '{' parameters+=Expression ( "," parameters+=Expression)* '}' )?
	'}';

Session returns Session:
	(history?='history')?
	'Session'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		'initial' initial=[State|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('outgoing' '{' outgoing+=Transition ( "," outgoing+=Transition)* '}' )?
		('entry' entry=Action)?
		('exit' exit=Action)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('internal' '{' internal+=InternalTransition ( "," internal+=InternalTransition)* '}' )?
		('substate' '{' substate+=State ( "," substate+=State)* '}' )?
		('region' '{' region+=ParallelRegion ( "," region+=ParallelRegion)* '}' )?
	'}';

FinalState returns FinalState:
	{FinalState}
	'FinalState'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('outgoing' '{' outgoing+=Transition ( "," outgoing+=Transition)* '}' )?
		('entry' entry=Action)?
		('exit' exit=Action)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('internal' '{' internal+=InternalTransition ( "," internal+=InternalTransition)* '}' )?
	'}';

CompositeState_Impl returns CompositeState:
	(history?='history')?
	'CompositeState'
	name=EString
	'{'
		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
		'initial' initial=[State|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		('outgoing' '{' outgoing+=Transition ( "," outgoing+=Transition)* '}' )?
		('entry' entry=Action)?
		('exit' exit=Action)?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('internal' '{' internal+=InternalTransition ( "," internal+=InternalTransition)* '}' )?
		('substate' '{' substate+=State ( "," substate+=State)* '}' )?
		('region' '{' region+=ParallelRegion ( "," region+=ParallelRegion)* '}' )?
	'}';

Instance returns Instance:
	'Instance'
	name=EString
	'{'
		'type' type=[Thing|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
	'}';

ConfigPropertyAssign returns ConfigPropertyAssign:
	'ConfigPropertyAssign'
	name=EString
	'{'
		'property' property=[Property|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		'init' init=Expression
		'instance' instance=InstanceRef
		('index' '{' index+=Expression ( "," index+=Expression)* '}' )?
	'}';

Connector returns Connector:
	'Connector'
	name=EString
	'{'
		'required' required=[RequiredPort|EString]
		'provided' provided=[ProvidedPort|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		'srv' srv=InstanceRef
		'cli' cli=InstanceRef
	'}';

ExternalConnector returns ExternalConnector:
	'ExternalConnector'
	name=EString
	'{'
		'port' port=[Port|EString]
		'protocol' protocol=[Protocol|EString]
		('annotations' '{' annotations+=PlatformAnnotation ( "," annotations+=PlatformAnnotation)* '}' )?
		'inst' inst=InstanceRef
	'}';

InstanceRef returns InstanceRef:
	'InstanceRef'
	'{'
		'instance' instance=[Instance|EString]
	'}';
