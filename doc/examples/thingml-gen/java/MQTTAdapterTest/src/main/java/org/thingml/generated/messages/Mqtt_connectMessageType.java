/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 */
/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated.messages;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import java.util.*;
import java.nio.*;

public class Mqtt_connectMessageType extends EventType {
public Mqtt_connectMessageType(short code) {super("mqtt_connect", code);
}

public Mqtt_connectMessageType() {
super("mqtt_connect", (short) 0);
}

public Event instantiate(final String client_id, final String host, final int portno, final boolean tls) { return new Mqtt_connectMessage(this, client_id, host, portno, tls); }
public Event instantiate(Map<String, Object> params) {return instantiate((String) params.get("client_id"), (String) params.get("host"), (Integer) params.get("portno"), (Boolean) params.get("tls"));
}

public class Mqtt_connectMessage extends Event implements java.io.Serializable {

public final String client_id;
public final String host;
public final int portno;
public final boolean tls;
public String toString(){
return "mqtt_connect (" + "client_id: " + client_id + ", " + "host: " + host + ", " + "portno: " + portno + ", " + "tls: " + tls + ")";
}

protected Mqtt_connectMessage(EventType type, final String client_id, final String host, final int portno, final boolean tls) {
super(type);
this.client_id = client_id;
this.host = host;
this.portno = portno;
this.tls = tls;
}
public Event clone() {
return instantiate(this.client_id, this.host, this.portno, this.tls);
}}

}

