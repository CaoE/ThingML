/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 */
/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : MQTTAdapterTest
 **/
public class MQTTAdapterTest extends Component implements IMQTTAdapterTest_clock, IMQTTAdapterTest_mqtt {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tclient_id = " + MQTTAdapterTest_client_id_var;
result += "\tbroker_host = " + MQTTAdapterTest_broker_host_var;
result += "\tbroker_port = " + MQTTAdapterTest_broker_port_var;
result += "\tbroker_user = " + MQTTAdapterTest_broker_user_var;
result += "\tbroker_pass = " + MQTTAdapterTest_broker_pass_var;
result += "\tbroker_tls = " + MQTTAdapterTest_broker_tls_var;
result += "\ttimer_id = " + MQTTAdapterTest_timer_id_var;
result += "";
return result;
}

public synchronized void timer_timeout_via_clock(short TimerMsgs_timer_timeout_id_var){
final Event _msg = timer_timeoutType.instantiate(TimerMsgs_timer_timeout_id_var);
_msg.setPort(clock_port);
receive(_msg);
}

public synchronized void mqtt_connected_via_mqtt(){
final Event _msg = mqtt_connectedType.instantiate();
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_disconnected_via_mqtt(){
final Event _msg = mqtt_disconnectedType.instantiate();
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_message_via_mqtt(String MQTTAdapterMsgs_mqtt_message_topic_var,  byte[] MQTTAdapterMsgs_mqtt_message_payload_var, long MQTTAdapterMsgs_mqtt_message_size_var){
final Event _msg = mqtt_messageType.instantiate(MQTTAdapterMsgs_mqtt_message_topic_var, MQTTAdapterMsgs_mqtt_message_payload_var, MQTTAdapterMsgs_mqtt_message_size_var);
_msg.setPort(mqtt_port);
receive(_msg);
}

private void sendTimer_start_via_clock(short TimerMsgs_timer_start_id_var, int TimerMsgs_timer_start_time_var){
clock_port.send(timer_startType.instantiate(TimerMsgs_timer_start_id_var, TimerMsgs_timer_start_time_var));
}

private void sendTimer_cancel_via_clock(short TimerMsgs_timer_cancel_id_var){
clock_port.send(timer_cancelType.instantiate(TimerMsgs_timer_cancel_id_var));
}

private void sendMqtt_connect_via_mqtt(String MQTTAdapterMsgs_mqtt_connect_client_id_var, String MQTTAdapterMsgs_mqtt_connect_host_var, int MQTTAdapterMsgs_mqtt_connect_portno_var, boolean MQTTAdapterMsgs_mqtt_connect_tls_var){
mqtt_port.send(mqtt_connectType.instantiate(MQTTAdapterMsgs_mqtt_connect_client_id_var, MQTTAdapterMsgs_mqtt_connect_host_var, MQTTAdapterMsgs_mqtt_connect_portno_var, MQTTAdapterMsgs_mqtt_connect_tls_var));
}

private void sendMqtt_disconnect_via_mqtt(){
mqtt_port.send(mqtt_disconnectType.instantiate());
}

private void sendMqtt_publish_via_mqtt(String MQTTAdapterMsgs_mqtt_publish_topic_var,  byte[] MQTTAdapterMsgs_mqtt_publish_payload_var, long MQTTAdapterMsgs_mqtt_publish_size_var){
mqtt_port.send(mqtt_publishType.instantiate(MQTTAdapterMsgs_mqtt_publish_topic_var, MQTTAdapterMsgs_mqtt_publish_payload_var, MQTTAdapterMsgs_mqtt_publish_size_var));
}

private void sendMqtt_subscribe_via_mqtt(String MQTTAdapterMsgs_mqtt_subscribe_topic_var){
mqtt_port.send(mqtt_subscribeType.instantiate(MQTTAdapterMsgs_mqtt_subscribe_topic_var));
}

private void sendMqtt_set_credentials_via_mqtt(String MQTTAdapterMsgs_mqtt_set_credentials_usr_var, String MQTTAdapterMsgs_mqtt_set_credentials_pwd_var){
mqtt_port.send(mqtt_set_credentialsType.instantiate(MQTTAdapterMsgs_mqtt_set_credentials_usr_var, MQTTAdapterMsgs_mqtt_set_credentials_pwd_var));
}

private void sendMqtt_set_prefix_via_mqtt(String MQTTAdapterMsgs_mqtt_set_prefix_prefix_var){
mqtt_port.send(mqtt_set_prefixType.instantiate(MQTTAdapterMsgs_mqtt_set_prefix_prefix_var));
}

//Attributes
private short MQTTAdapterTest_timer_id_var;
private String MQTTAdapterTest_broker_pass_var;
private String MQTTAdapterTest_broker_host_var;
private int MQTTAdapterTest_broker_port_var;
private boolean MQTTAdapterTest_broker_tls_var;
private String MQTTAdapterTest_client_id_var;
private String MQTTAdapterTest_broker_user_var;
//Ports
private Port clock_port;
private Port mqtt_port;
//Message types
protected final Mqtt_set_credentialsMessageType mqtt_set_credentialsType = new Mqtt_set_credentialsMessageType();
protected final Mqtt_set_tls_certificatesMessageType mqtt_set_tls_certificatesType = new Mqtt_set_tls_certificatesMessageType();
protected final Mqtt_connectMessageType mqtt_connectType = new Mqtt_connectMessageType();
protected final Mqtt_disconnectMessageType mqtt_disconnectType = new Mqtt_disconnectMessageType();
protected final Mqtt_connectedMessageType mqtt_connectedType = new Mqtt_connectedMessageType();
protected final Mqtt_disconnectedMessageType mqtt_disconnectedType = new Mqtt_disconnectedMessageType();
protected final Mqtt_publishMessageType mqtt_publishType = new Mqtt_publishMessageType();
protected final Mqtt_subscribeMessageType mqtt_subscribeType = new Mqtt_subscribeMessageType();
protected final Mqtt_set_prefixMessageType mqtt_set_prefixType = new Mqtt_set_prefixMessageType();
protected final Mqtt_messageMessageType mqtt_messageType = new Mqtt_messageMessageType();
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
//Empty Constructor
public MQTTAdapterTest() {
super();
}

//Getters and Setters for non readonly/final attributes
public short getMQTTAdapterTest_timer_id_var() {
return MQTTAdapterTest_timer_id_var;
}

public MQTTAdapterTest initMQTTAdapterTest_timer_id_var(short MQTTAdapterTest_timer_id_var) {
this.MQTTAdapterTest_timer_id_var = MQTTAdapterTest_timer_id_var;
return this;
}

public String getMQTTAdapterTest_broker_pass_var() {
return MQTTAdapterTest_broker_pass_var;
}

public void setMQTTAdapterTest_broker_pass_var(String MQTTAdapterTest_broker_pass_var) {
this.MQTTAdapterTest_broker_pass_var = MQTTAdapterTest_broker_pass_var;
}

public MQTTAdapterTest initMQTTAdapterTest_broker_pass_var(String MQTTAdapterTest_broker_pass_var) {
this.MQTTAdapterTest_broker_pass_var = MQTTAdapterTest_broker_pass_var;
return this;
}

public String getMQTTAdapterTest_broker_host_var() {
return MQTTAdapterTest_broker_host_var;
}

public void setMQTTAdapterTest_broker_host_var(String MQTTAdapterTest_broker_host_var) {
this.MQTTAdapterTest_broker_host_var = MQTTAdapterTest_broker_host_var;
}

public MQTTAdapterTest initMQTTAdapterTest_broker_host_var(String MQTTAdapterTest_broker_host_var) {
this.MQTTAdapterTest_broker_host_var = MQTTAdapterTest_broker_host_var;
return this;
}

public int getMQTTAdapterTest_broker_port_var() {
return MQTTAdapterTest_broker_port_var;
}

public void setMQTTAdapterTest_broker_port_var(int MQTTAdapterTest_broker_port_var) {
this.MQTTAdapterTest_broker_port_var = MQTTAdapterTest_broker_port_var;
}

public MQTTAdapterTest initMQTTAdapterTest_broker_port_var(int MQTTAdapterTest_broker_port_var) {
this.MQTTAdapterTest_broker_port_var = MQTTAdapterTest_broker_port_var;
return this;
}

public boolean getMQTTAdapterTest_broker_tls_var() {
return MQTTAdapterTest_broker_tls_var;
}

public void setMQTTAdapterTest_broker_tls_var(boolean MQTTAdapterTest_broker_tls_var) {
this.MQTTAdapterTest_broker_tls_var = MQTTAdapterTest_broker_tls_var;
}

public MQTTAdapterTest initMQTTAdapterTest_broker_tls_var(boolean MQTTAdapterTest_broker_tls_var) {
this.MQTTAdapterTest_broker_tls_var = MQTTAdapterTest_broker_tls_var;
return this;
}

public String getMQTTAdapterTest_client_id_var() {
return MQTTAdapterTest_client_id_var;
}

public MQTTAdapterTest initMQTTAdapterTest_client_id_var(String MQTTAdapterTest_client_id_var) {
this.MQTTAdapterTest_client_id_var = MQTTAdapterTest_client_id_var;
return this;
}

public String getMQTTAdapterTest_broker_user_var() {
return MQTTAdapterTest_broker_user_var;
}

public void setMQTTAdapterTest_broker_user_var(String MQTTAdapterTest_broker_user_var) {
this.MQTTAdapterTest_broker_user_var = MQTTAdapterTest_broker_user_var;
}

public MQTTAdapterTest initMQTTAdapterTest_broker_user_var(String MQTTAdapterTest_broker_user_var) {
this.MQTTAdapterTest_broker_user_var = MQTTAdapterTest_broker_user_var;
return this;
}

//Getters for Ports
public Port getClock_port() {
return clock_port;
}
public Port getMqtt_port() {
return mqtt_port;
}
private CompositeState buildMQTTAdapterTest_MQTTAdapterTestSC(){
final AtomicState state_MQTTAdapterTest_MQTTAdapterTestSC_DISCONNECTED = new AtomicState("DISCONNECTED");
final AtomicState state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED = new AtomicState("CONNECTED");
state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED.onEntry(()->{
sendMqtt_set_prefix_via_mqtt((String) ("models18/"));
sendMqtt_subscribe_via_mqtt((String) ("#"));
publish_hello();
sendTimer_start_via_clock((short) (getMQTTAdapterTest_timer_id_var()), (int) (5000));
});
Transition h2038827813 = new Transition();
h2038827813.from(state_MQTTAdapterTest_MQTTAdapterTestSC_DISCONNECTED).to(state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED);
h2038827813.event(mqtt_connectedType);
h2038827813.port(mqtt_port);
h2038827813.action((Event e)->{
System.out.print("Client got mqtt_connected\n");
});

Handler h1399391725 = new Handler();
h1399391725.from(state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED);
h1399391725.event(timer_timeoutType);
h1399391725.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == getMQTTAdapterTest_timer_id_var();
});

h1399391725.port(clock_port);
h1399391725.action((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
publish_hello();
sendTimer_start_via_clock((short) (getMQTTAdapterTest_timer_id_var()), (int) (5000));
});

Handler h1786959028 = new Handler();
h1786959028.from(state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED);
h1786959028.event(mqtt_messageType);
h1786959028.port(mqtt_port);
h1786959028.action((Event e)->{
final Mqtt_messageMessageType.Mqtt_messageMessage mqtt_message = (Mqtt_messageMessageType.Mqtt_messageMessage) e;
System.out.println("RCV topic:"+mqtt_message.topic+" payload:" + mqtt_message.payload);
});

Transition h274480106 = new Transition();
h274480106.from(state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED).to(state_MQTTAdapterTest_MQTTAdapterTestSC_DISCONNECTED);
h274480106.event(mqtt_disconnectedType);
h274480106.port(mqtt_port);
h274480106.action((Event e)->{
System.out.print("Client got mqtt_disconnected\n");
});

final CompositeState state_MQTTAdapterTest_MQTTAdapterTestSC = new CompositeState("MQTTAdapterTestSC");
state_MQTTAdapterTest_MQTTAdapterTestSC.onEntry(()->{
if(getMQTTAdapterTest_broker_user_var() != null) {
sendMqtt_set_credentials_via_mqtt((String) (getMQTTAdapterTest_broker_user_var()), (String) (getMQTTAdapterTest_broker_pass_var()));

}
sendMqtt_connect_via_mqtt((String) (getMQTTAdapterTest_client_id_var()), (String) (getMQTTAdapterTest_broker_host_var()), (int) (getMQTTAdapterTest_broker_port_var()), (boolean) (getMQTTAdapterTest_broker_tls_var()));
});
state_MQTTAdapterTest_MQTTAdapterTestSC.add(state_MQTTAdapterTest_MQTTAdapterTestSC_DISCONNECTED);
state_MQTTAdapterTest_MQTTAdapterTestSC.add(state_MQTTAdapterTest_MQTTAdapterTestSC_CONNECTED);
state_MQTTAdapterTest_MQTTAdapterTestSC.initial(state_MQTTAdapterTest_MQTTAdapterTestSC_DISCONNECTED);
return state_MQTTAdapterTest_MQTTAdapterTestSC;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
clock_port = new Port("clock", this);
mqtt_port = new Port("mqtt", this);
} else {
clock_port = ((MQTTAdapterTest)root).clock_port;
mqtt_port = ((MQTTAdapterTest)root).mqtt_port;
}
if (session == null){
//Init state machine
behavior = buildMQTTAdapterTest_MQTTAdapterTestSC();
}
return this;
}

 void publish_hello() {
sendMqtt_publish_via_mqtt((String) ("Hello"), ( byte[]) ("World".getBytes()), (long) (5));
}
}
