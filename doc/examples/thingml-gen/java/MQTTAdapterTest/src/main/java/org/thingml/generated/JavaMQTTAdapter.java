/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 */
/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

//START: @java_import annotation
import java.util.logging.Logger;
import java.util.logging.Level;
import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.*;

//END: @java_import annotation

/**
 * Definition for type : JavaMQTTAdapter
 **/
public class JavaMQTTAdapter extends Component implements IJavaMQTTAdapter_mqtt, org.eclipse.paho.client.mqttv3.MqttCallbackExtended {


	// START: @java_features annotation
org.eclipse.paho.client.mqttv3.MqttClient clientPub, clientSub;

	// END: @java_features annotation

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tbroker_uri = " + JavaMQTTAdapter_broker_uri_var;
result += "\tclient_id = " + JavaMQTTAdapter_client_id_var;
result += "\tusername = " + JavaMQTTAdapter_username_var;
result += "\tpassword = " + JavaMQTTAdapter_password_var;
result += "\ttopic_prefix = " + JavaMQTTAdapter_topic_prefix_var;
result += "";
return result;
}

public synchronized void mqtt_connect_via_mqtt(String MQTTAdapterMsgs_mqtt_connect_client_id_var, String MQTTAdapterMsgs_mqtt_connect_host_var, int MQTTAdapterMsgs_mqtt_connect_portno_var, boolean MQTTAdapterMsgs_mqtt_connect_tls_var){
final Event _msg = mqtt_connectType.instantiate(MQTTAdapterMsgs_mqtt_connect_client_id_var, MQTTAdapterMsgs_mqtt_connect_host_var, MQTTAdapterMsgs_mqtt_connect_portno_var, MQTTAdapterMsgs_mqtt_connect_tls_var);
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_disconnect_via_mqtt(){
final Event _msg = mqtt_disconnectType.instantiate();
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_publish_via_mqtt(String MQTTAdapterMsgs_mqtt_publish_topic_var,  byte[] MQTTAdapterMsgs_mqtt_publish_payload_var, long MQTTAdapterMsgs_mqtt_publish_size_var){
final Event _msg = mqtt_publishType.instantiate(MQTTAdapterMsgs_mqtt_publish_topic_var, MQTTAdapterMsgs_mqtt_publish_payload_var, MQTTAdapterMsgs_mqtt_publish_size_var);
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_subscribe_via_mqtt(String MQTTAdapterMsgs_mqtt_subscribe_topic_var){
final Event _msg = mqtt_subscribeType.instantiate(MQTTAdapterMsgs_mqtt_subscribe_topic_var);
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_set_credentials_via_mqtt(String MQTTAdapterMsgs_mqtt_set_credentials_usr_var, String MQTTAdapterMsgs_mqtt_set_credentials_pwd_var){
final Event _msg = mqtt_set_credentialsType.instantiate(MQTTAdapterMsgs_mqtt_set_credentials_usr_var, MQTTAdapterMsgs_mqtt_set_credentials_pwd_var);
_msg.setPort(mqtt_port);
receive(_msg);
}

public synchronized void mqtt_set_prefix_via_mqtt(String MQTTAdapterMsgs_mqtt_set_prefix_prefix_var){
final Event _msg = mqtt_set_prefixType.instantiate(MQTTAdapterMsgs_mqtt_set_prefix_prefix_var);
_msg.setPort(mqtt_port);
receive(_msg);
}

private void sendMqtt_connected_via_mqtt(){
mqtt_port.send(mqtt_connectedType.instantiate());
}

private void sendMqtt_disconnected_via_mqtt(){
mqtt_port.send(mqtt_disconnectedType.instantiate());
}

private void sendMqtt_message_via_mqtt(String MQTTAdapterMsgs_mqtt_message_topic_var,  byte[] MQTTAdapterMsgs_mqtt_message_payload_var, long MQTTAdapterMsgs_mqtt_message_size_var){
mqtt_port.send(mqtt_messageType.instantiate(MQTTAdapterMsgs_mqtt_message_topic_var, MQTTAdapterMsgs_mqtt_message_payload_var, MQTTAdapterMsgs_mqtt_message_size_var));
}

//Attributes
private String JavaMQTTAdapter_username_var;
private String JavaMQTTAdapter_client_id_var;
private String JavaMQTTAdapter_topic_prefix_var;
private String JavaMQTTAdapter_password_var;
private String JavaMQTTAdapter_broker_uri_var;
//Ports
private Port mqtt_port;
//Message types
protected final Mqtt_set_credentialsMessageType mqtt_set_credentialsType = new Mqtt_set_credentialsMessageType();
protected final Mqtt_set_tls_certificatesMessageType mqtt_set_tls_certificatesType = new Mqtt_set_tls_certificatesMessageType();
protected final Mqtt_connectMessageType mqtt_connectType = new Mqtt_connectMessageType();
protected final Mqtt_disconnectMessageType mqtt_disconnectType = new Mqtt_disconnectMessageType();
protected final Mqtt_connectedMessageType mqtt_connectedType = new Mqtt_connectedMessageType();
protected final Mqtt_disconnectedMessageType mqtt_disconnectedType = new Mqtt_disconnectedMessageType();
protected final Mqtt_publishMessageType mqtt_publishType = new Mqtt_publishMessageType();
protected final Mqtt_subscribeMessageType mqtt_subscribeType = new Mqtt_subscribeMessageType();
protected final Mqtt_set_prefixMessageType mqtt_set_prefixType = new Mqtt_set_prefixMessageType();
protected final Mqtt_messageMessageType mqtt_messageType = new Mqtt_messageMessageType();
//Empty Constructor
public JavaMQTTAdapter() {
super();
}

//Getters and Setters for non readonly/final attributes
public String getJavaMQTTAdapter_username_var() {
return JavaMQTTAdapter_username_var;
}

public void setJavaMQTTAdapter_username_var(String JavaMQTTAdapter_username_var) {
this.JavaMQTTAdapter_username_var = JavaMQTTAdapter_username_var;
}

public JavaMQTTAdapter initJavaMQTTAdapter_username_var(String JavaMQTTAdapter_username_var) {
this.JavaMQTTAdapter_username_var = JavaMQTTAdapter_username_var;
return this;
}

public String getJavaMQTTAdapter_client_id_var() {
return JavaMQTTAdapter_client_id_var;
}

public void setJavaMQTTAdapter_client_id_var(String JavaMQTTAdapter_client_id_var) {
this.JavaMQTTAdapter_client_id_var = JavaMQTTAdapter_client_id_var;
}

public JavaMQTTAdapter initJavaMQTTAdapter_client_id_var(String JavaMQTTAdapter_client_id_var) {
this.JavaMQTTAdapter_client_id_var = JavaMQTTAdapter_client_id_var;
return this;
}

public String getJavaMQTTAdapter_topic_prefix_var() {
return JavaMQTTAdapter_topic_prefix_var;
}

public void setJavaMQTTAdapter_topic_prefix_var(String JavaMQTTAdapter_topic_prefix_var) {
this.JavaMQTTAdapter_topic_prefix_var = JavaMQTTAdapter_topic_prefix_var;
}

public JavaMQTTAdapter initJavaMQTTAdapter_topic_prefix_var(String JavaMQTTAdapter_topic_prefix_var) {
this.JavaMQTTAdapter_topic_prefix_var = JavaMQTTAdapter_topic_prefix_var;
return this;
}

public String getJavaMQTTAdapter_password_var() {
return JavaMQTTAdapter_password_var;
}

public void setJavaMQTTAdapter_password_var(String JavaMQTTAdapter_password_var) {
this.JavaMQTTAdapter_password_var = JavaMQTTAdapter_password_var;
}

public JavaMQTTAdapter initJavaMQTTAdapter_password_var(String JavaMQTTAdapter_password_var) {
this.JavaMQTTAdapter_password_var = JavaMQTTAdapter_password_var;
return this;
}

public String getJavaMQTTAdapter_broker_uri_var() {
return JavaMQTTAdapter_broker_uri_var;
}

public void setJavaMQTTAdapter_broker_uri_var(String JavaMQTTAdapter_broker_uri_var) {
this.JavaMQTTAdapter_broker_uri_var = JavaMQTTAdapter_broker_uri_var;
}

public JavaMQTTAdapter initJavaMQTTAdapter_broker_uri_var(String JavaMQTTAdapter_broker_uri_var) {
this.JavaMQTTAdapter_broker_uri_var = JavaMQTTAdapter_broker_uri_var;
return this;
}

//Getters for Ports
public Port getMqtt_port() {
return mqtt_port;
}
private CompositeState buildJavaMQTTAdapter_MQTTAdapterThing(){
final AtomicState state_JavaMQTTAdapter_MQTTAdapterThing_Start = new AtomicState("Start");
final CompositeState state_JavaMQTTAdapter_MQTTAdapterThing = new CompositeState("MQTTAdapterThing");
Handler h732470450 = new Handler();
h732470450.from(state_JavaMQTTAdapter_MQTTAdapterThing);
h732470450.event(mqtt_set_credentialsType);
h732470450.port(mqtt_port);
h732470450.action((Event e)->{
final Mqtt_set_credentialsMessageType.Mqtt_set_credentialsMessage mqtt_set_credentials = (Mqtt_set_credentialsMessageType.Mqtt_set_credentialsMessage) e;
JavaMQTTAdapter_username_var = (String) (mqtt_set_credentials.usr);
JavaMQTTAdapter_password_var = (String) (mqtt_set_credentials.pwd);
});

Handler h1499489673 = new Handler();
h1499489673.from(state_JavaMQTTAdapter_MQTTAdapterThing);
h1499489673.event(mqtt_set_prefixType);
h1499489673.port(mqtt_port);
h1499489673.action((Event e)->{
final Mqtt_set_prefixMessageType.Mqtt_set_prefixMessage mqtt_set_prefix = (Mqtt_set_prefixMessageType.Mqtt_set_prefixMessage) e;
setTopicPrefix((String) (mqtt_set_prefix.prefix));
});

Handler h706341616 = new Handler();
h706341616.from(state_JavaMQTTAdapter_MQTTAdapterThing);
h706341616.event(mqtt_connectType);
h706341616.port(mqtt_port);
h706341616.action((Event e)->{
final Mqtt_connectMessageType.Mqtt_connectMessage mqtt_connect = (Mqtt_connectMessageType.Mqtt_connectMessage) e;
JavaMQTTAdapter_client_id_var = (String) (mqtt_connect.client_id);
String uri;
if(mqtt_connect.tls) {
uri = "ssl://";

} else {
uri = "tcp://";

}
uri += mqtt_connect.host + ":" + mqtt_connect.portno;
JavaMQTTAdapter_broker_uri_var = (String) (uri);
mqtt_connect();
});

Handler h617412264 = new Handler();
h617412264.from(state_JavaMQTTAdapter_MQTTAdapterThing);
h617412264.event(mqtt_publishType);
h617412264.port(mqtt_port);
h617412264.action((Event e)->{
final Mqtt_publishMessageType.Mqtt_publishMessage mqtt_publish = (Mqtt_publishMessageType.Mqtt_publishMessage) e;
mqtt_publish((String) (mqtt_publish.topic), ( byte[]) (mqtt_publish.payload), (int) (mqtt_publish.size));
});

Handler h2020698344 = new Handler();
h2020698344.from(state_JavaMQTTAdapter_MQTTAdapterThing);
h2020698344.event(mqtt_subscribeType);
h2020698344.port(mqtt_port);
h2020698344.action((Event e)->{
final Mqtt_subscribeMessageType.Mqtt_subscribeMessage mqtt_subscribe = (Mqtt_subscribeMessageType.Mqtt_subscribeMessage) e;
mqtt_subscribe((String) (mqtt_subscribe.topic));
});

state_JavaMQTTAdapter_MQTTAdapterThing.add(state_JavaMQTTAdapter_MQTTAdapterThing_Start);
state_JavaMQTTAdapter_MQTTAdapterThing.initial(state_JavaMQTTAdapter_MQTTAdapterThing_Start);
return state_JavaMQTTAdapter_MQTTAdapterThing;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
mqtt_port = new Port("mqtt", this);
} else {
mqtt_port = ((JavaMQTTAdapter)root).mqtt_port;
}
if (session == null){
//Init state machine
behavior = buildJavaMQTTAdapter_MQTTAdapterThing();
}
return this;
}

 void setTopicPrefix(final String JavaMQTTAdapter_setTopicPrefix_src_var) {
JavaMQTTAdapter_topic_prefix_var = (String) (JavaMQTTAdapter_setTopicPrefix_src_var);
}
 boolean mqtt_connect() {
try {
MemoryPersistence persistence = new MemoryPersistence();
Logger.getLogger(this.getClass().getName()).log(Level.INFO, "MQTT Connect to: " + getJavaMQTTAdapter_broker_uri_var());
MqttConnectOptions connOpts = new MqttConnectOptions();
connOpts.setCleanSession(true);
connOpts.setAutomaticReconnect(true);
if(getJavaMQTTAdapter_username_var() != null && getJavaMQTTAdapter_password_var() != null) {
connOpts.setUserName(getJavaMQTTAdapter_username_var());
connOpts.setPassword(getJavaMQTTAdapter_password_var().toCharArray());

}
if(getJavaMQTTAdapter_client_id_var() == null) {
JavaMQTTAdapter_client_id_var = (String) (MqttClient.generateClientId());

}
clientSub = new MqttClient(getJavaMQTTAdapter_broker_uri_var(), getJavaMQTTAdapter_client_id_var() + "_Sub", persistence);
clientPub = new MqttClient(getJavaMQTTAdapter_broker_uri_var(), getJavaMQTTAdapter_client_id_var() + "_Pub", persistence);
clientSub.	setCallback(this);
clientSub.connect(connOpts);
clientPub.connect(connOpts);
} catch (org.eclipse.paho.client.mqttv3.MqttException ex) {
Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
return (boolean) (false);
}
return (boolean) (true);
}
 boolean mqtt_publish(final String JavaMQTTAdapter_mqtt_publish_topic_var, final  byte[] JavaMQTTAdapter_mqtt_publish_payload_var, final int JavaMQTTAdapter_mqtt_publish_size_var) {
if(clientPub == null) {
return (boolean) (false);

}
try {
            Logger.getLogger(this.getClass().getName()).log(Level.INFO, "MQTT Publish: " + JavaMQTTAdapter_mqtt_publish_topic_var + " -> " + new String(JavaMQTTAdapter_mqtt_publish_payload_var));
            MqttMessage message = new MqttMessage(JavaMQTTAdapter_mqtt_publish_payload_var);
            if (getJavaMQTTAdapter_topic_prefix_var() != null) clientPub.publish(getJavaMQTTAdapter_topic_prefix_var() + JavaMQTTAdapter_mqtt_publish_topic_var, message);
            else clientPub.publish(JavaMQTTAdapter_mqtt_publish_topic_var, message);
        } catch (org.eclipse.paho.client.mqttv3.MqttException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
return (boolean) (false);
}
return (boolean) (true);
}
 boolean mqtt_subscribe(final String JavaMQTTAdapter_mqtt_subscribe_topic_var) {
if(clientSub == null) {
return (boolean) (false);

}
try {
            Logger.getLogger(this.getClass().getName()).log(Level.INFO, "MQTT Subscribe: " + JavaMQTTAdapter_mqtt_subscribe_topic_var);
            if (getJavaMQTTAdapter_topic_prefix_var() != null) clientSub.subscribe(getJavaMQTTAdapter_topic_prefix_var() + JavaMQTTAdapter_mqtt_subscribe_topic_var);
            else clientSub.subscribe(JavaMQTTAdapter_mqtt_subscribe_topic_var);
        } catch (org.eclipse.paho.client.mqttv3.MqttException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
return (boolean) (false);
}
return (boolean) (true);
}
public void messageArrived(final String JavaMQTTAdapter_messageArrived_topic_var, final org.eclipse.paho.client.mqttv3.MqttMessage JavaMQTTAdapter_messageArrived_m_var) {
System.out.print("Message arrived on topic ");
System.out.print(JavaMQTTAdapter_messageArrived_topic_var);
System.out.print("\n");
}
public void connectionLost(final Throwable JavaMQTTAdapter_connectionLost_t_var) {
System.out.print("connectionLost \n");
sendMqtt_disconnected_via_mqtt();
}
public void deliveryComplete(final IMqttDeliveryToken JavaMQTTAdapter_deliveryComplete_imdt_var) {
System.out.print("deliveryComplete \n");
}
public void connectComplete(final boolean JavaMQTTAdapter_connectComplete_reconnect_var, final String JavaMQTTAdapter_connectComplete_serverURI_var) {
System.out.print("connectComplete \n");
sendMqtt_connected_via_mqtt();
}
}
