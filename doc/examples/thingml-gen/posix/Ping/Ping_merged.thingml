thing fragment PingMsgs {
	message ping(seq : UInt8)
	message pong(seq : UInt8)
}
thing PingServer includes PingMsgs {
	provided port ping_service {
		sends pong receives ping
	}
	statechart init Active {
		state Active {
			transition -> Active
			event m : ping_service?ping
			action ping_service!pong(m.seq)
		}
	}
}
thing PingClient includes PingMsgs {
	required port ping_service {
		sends ping receives pong
	}
	statechart PingClientMachine init Ping {
		property counter : UInt8 = 0
		state Ping {
			on entry do
				print "Send Ping " , counter , " ... "
				ping_service!ping(counter)
			end
			on exit counter = counter + 1
			transition -> OK
			event e : ping_service?pong
			guard e.seq == counter
			action println "[OK]"
			transition -> Stop
			event e : ping_service?pong
			guard e.seq != counter
			action println "[Error]"
		}
		state OK {
			transition -> Stop guard counter > 5
			transition -> Ping guard counter <= 5
		}
		final state Stop {
			on entry println "Bye."
		}
	}
}
datatype Byte<1>
	@type_checker "Byte"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
	@go_type "byte"
datatype Char<1>
	@type_checker "Byte"
	@c_type "char"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
	@go_type "byte"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "bool"
	@c_byte_size "1"
	@java_type "boolean"
	@js_type "boolean"
	@java_primitive "true"
	@go_type "bool"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int"
	@c_byte_size "2"
	@java_type "short"
	@js_type "short"
	@java_primitive "true"
	@go_type "int16"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "short"
	@js_type "short"
	@java_primitive "true"
	@go_type "uint8"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
	@go_type "int8"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
	@go_type "uint16"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
	@java_type "short"
	@js_type "short"
	@java_primitive "true"
	@go_type "int16"
datatype Int32<4>
	@type_checker "Integer"
	@c_type "int32_t"
	@c_byte_size "4"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
	@go_type "int32"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
	@java_type "long"
	@js_type "long"
	@java_primitive "true"
	@go_type "uint32"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
	@go_type "int32"
datatype ULong<4>
	@type_checker "Integer"
	@c_type "unsigned long"
	@c_byte_size "4"
	@java_type "long"
	@js_type "long"
	@java_primitive "true"
	@go_type "uint32"
datatype LongLong<8>
	@type_checker "Integer"
	@c_type "long long"
	@c_byte_size "8"
	@java_type "long"
	@js_type "long"
	@java_primitive "true"
	@go_type "int64"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
	@java_type "float"
	@js_type "float"
	@java_primitive "true"
	@go_type "float32"
datatype Double<8>
	@type_checker "Real"
	@c_type "double"
	@c_byte_size "8"
	@java_type "double"
	@js_type "double"
	@java_primitive "true"
	@go_type "float64"
object String
	@serializable
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
	@js_type "String"
	@go_type "string"
enumeration DigitalState
	@type_checker "Integer"
	@java_type "byte"
	@java_primitive "true"
	@c_byte_size "1"
	@c_type "uint8_t"
	@go_type "uint8"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
configuration Ping {
	instance client : PingClient
	instance server : PingServer
	connector client.ping_service => server . ping_service
}
