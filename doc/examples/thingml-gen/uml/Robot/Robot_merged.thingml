thing fragment RobotMsgs {
	message distance(d : UInt16)
	message bump(direction : UInt8)
	message turn(angle : Int16)
	message forward(speed : UInt8)
	message backward(speed : UInt8)
	message stop()
	message odometry(left : Int16, right : Int16)
	message wheel_position()
}
thing RobotControl includes RobotMsgs {
	required port rangefinder {
		receives distance
	}
	required port bumper {
		receives bump
	}
	required port platform {
		sends forward sends backward sends stop sends turn receives odometry
	}
}
thing DistanceSensor includes RobotMsgs {
	provided port data {
		sends distance
	}
}
thing CollisionSensor includes RobotMsgs {
	provided port data {
		sends bump
	}
}
thing MotionControl includes RobotMsgs {
	provided port ctrl {
		sends odometry receives forward receives backward receives stop receives turn
	}
	required port left {
		sends forward sends backward sends stop receives wheel_position
	}
	required port right {
		sends forward sends backward sends stop receives wheel_position
	}
}
thing WheelControl includes RobotMsgs {
	provided port ctrl {
		sends wheel_position receives forward receives backward receives stop
	}
	property motor_position : Int16
	function init_motor() do
	end
	function set_motor_speed(speed : Int16) do
	end
	statechart init Stopped {
		on entry init_motor()
		state Stopped {
			on entry set_motor_speed(0)
			transition -> Forward
			event e : ctrl?forward
			action set_motor_speed(e.speed)
			transition -> Backward
			event e : ctrl?backward
			action set_motor_speed(-e.speed)
		}
		state Forward {
			transition -> Forward
			event e : ctrl?forward
			action set_motor_speed(e.speed)
			transition -> Stopped
			event e : ctrl?stop
		}
		state Backward {
			transition -> Backward
			event e : ctrl?backward
			action set_motor_speed(-e.speed)
			transition -> Stopped
			event e : ctrl?stop
		}
	}
}
datatype Byte<1>
	@type_checker "Byte"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
	@go_type "byte"
datatype Char<1>
	@type_checker "Byte"
	@c_type "char"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
	@go_type "byte"
datatype Boolean<1>
	@type_checker "Boolean"
	@c_type "bool"
	@c_byte_size "1"
	@java_type "boolean"
	@js_type "boolean"
	@java_primitive "true"
	@go_type "bool"
datatype Integer<2>
	@type_checker "Integer"
	@c_type "int"
	@c_byte_size "2"
	@java_type "short"
	@js_type "short"
	@java_primitive "true"
	@go_type "int16"
datatype UInt8<1>
	@type_checker "Integer"
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "short"
	@js_type "short"
	@java_primitive "true"
	@go_type "uint8"
datatype Int8<1>
	@type_checker "Integer"
	@c_type "int8_t"
	@c_byte_size "1"
	@java_type "byte"
	@js_type "byte"
	@java_primitive "true"
	@go_type "int8"
datatype UInt16<2>
	@type_checker "Integer"
	@c_type "uint16_t"
	@c_byte_size "2"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
	@go_type "uint16"
datatype Int16<2>
	@type_checker "Integer"
	@c_type "int16_t"
	@c_byte_size "2"
	@java_type "short"
	@js_type "short"
	@java_primitive "true"
	@go_type "int16"
datatype Int32<4>
	@type_checker "Integer"
	@c_type "int32_t"
	@c_byte_size "4"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
	@go_type "int32"
datatype UInt32<4>
	@type_checker "Integer"
	@c_type "uint32_t"
	@c_byte_size "4"
	@java_type "long"
	@js_type "long"
	@java_primitive "true"
	@go_type "uint32"
datatype Long<4>
	@type_checker "Integer"
	@c_type "long"
	@c_byte_size "4"
	@java_type "int"
	@js_type "int"
	@java_primitive "true"
	@go_type "int32"
datatype ULong<4>
	@type_checker "Integer"
	@c_type "unsigned long"
	@c_byte_size "4"
	@java_type "long"
	@js_type "long"
	@java_primitive "true"
	@go_type "uint32"
datatype LongLong<8>
	@type_checker "Integer"
	@c_type "long long"
	@c_byte_size "8"
	@java_type "long"
	@js_type "long"
	@java_primitive "true"
	@go_type "int64"
datatype Float<4>
	@type_checker "Real"
	@c_type "float"
	@c_byte_size "4"
	@java_type "float"
	@js_type "float"
	@java_primitive "true"
	@go_type "float32"
datatype Double<8>
	@type_checker "Real"
	@c_type "double"
	@c_byte_size "8"
	@java_type "double"
	@js_type "double"
	@java_primitive "true"
	@go_type "float64"
object String
	@serializable
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String"
	@js_type "String"
	@go_type "string"
enumeration DigitalState
	@type_checker "Integer"
	@java_type "byte"
	@java_primitive "true"
	@c_byte_size "1"
	@c_type "uint8_t"
	@go_type "uint8"
	{
	LOW @enum_val "0"
	HIGH @enum_val "1"
}
configuration Robot {
	instance robot : RobotControl
	instance sdist : DistanceSensor
	instance scoll : CollisionSensor
	instance motion : MotionControl
	instance left_wheel : WheelControl
	instance right_wheel : WheelControl
	connector robot.rangefinder => sdist . data
	connector robot.bumper => scoll . data
	connector robot.platform => motion . ctrl
	connector motion.left => left_wheel . ctrl
	connector motion.right => right_wheel . ctrl
}
