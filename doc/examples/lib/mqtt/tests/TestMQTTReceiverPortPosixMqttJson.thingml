
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "TestMQTTPorts.thingml"



thing TestMQTTReceiverPort_PosixMqttJson_Impl includes TestMQTTReceiverPort, MQTTAdapterMsgs 
@c_header `#include "jsmn.h"`
{
	
	required port posixmqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	function posixmqtt_subscribe() do
		
	end
	
	function posixmqtt_parsemsg(topic : String, payload : String, len : UInt32) : Boolean do
	
		// Variables to be used for parsing the JSON payload
		`jsmn_parser parser;
		jsmn_init(&parser);
		jsmntok_t tokens[32];` // 32 should be adjusted for the largest message to be parsed
		var parse_result : Int16
		
		// `printf("Topic:%s, Payload:%s\n", `&topic&`, `&payload&`);`
		
		parse_result = `jsmn_parse(&parser, `&payload&`, `&len&`, tokens, 32);`
	

		do
			print "Received an unhandled message\n"
		end
		
		return false

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event posixmqtt?mqtt_connected action posixmqtt_subscribe()
		internal event m : posixmqtt?mqtt_message action posixmqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:receiver?no_parameters action do
			`char payload[2];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("no_parameters", `payload` as String, `strlen(payload)` as Integer)
		end

		internal event e:receiver?some_numbers action do
			`char payload[112];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "i8");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.i8&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "ui8");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.ui8&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "i");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.i&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "ui");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.ui&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "d");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (isnan(`&e.d&`) || isinf(`&e.d&`)) {`
			`	result = sprintf(&payload[index],"%.*s", 112-index, "null");`
			`} else {`
			`	result = sprintf(&payload[index], "%#.15g", `&e.d&`);`
			`}`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "l");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.l&`) { result = sprintf(&payload[index],"%.*s", 112-index, "null"); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("some_numbers", `payload` as String, `strlen(payload)` as Integer)
		end

		internal event e:receiver?some_strings action do
			`char payload[28];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "c");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.c&`) { result = sprintf(&payload[index],"%.*s", 28-index, "null"); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "str");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.str&`) { result = sprintf(&payload[index],"%.*s", 28-index, "null"); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("some_strings", `payload` as String, `strlen(payload)` as Integer)
		end

		internal event e:receiver?some_bytes action do
			`char payload[26];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "b1");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.b1&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "b2");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.b2&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("some_bytes", `payload` as String, `strlen(payload)` as Integer)
		end

		internal event e:receiver?some_enum action do
			`char payload[26];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "d0");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.d0&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "d1");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%u", `&e.d1&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("some_enum", `payload` as String, `strlen(payload)` as Integer)
		end

		internal event e:receiver?some_array action do
			`char payload[27];`
			`uint16_t index = 0;`
			`int result = 0;`
			`payload[index++] = '{';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "a");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`result = sprintf(&payload[index], "%d", `&e.a&`);`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = ',';payload[index++] = ' ';`
			`payload[index++] = '"'; result = sprintf(&payload[index],"%s", "sa");`
			`if (result >= 0) { index += result; payload[index++] = '"';payload[index++] = ':';} else { return; }`
			`if (`&e.sa&`) { result = sprintf(&payload[index],"%.*s", 27-index, "null"); }`
			`if (result >= 0) { index += result; } else { return; }`
			`payload[index++] = '}';`
			`payload[index++] = 0;`
			posixmqtt!mqtt_publish("some_array", `payload` as String, `strlen(payload)` as Integer)
		end



		state Running {}
		
	}
}

