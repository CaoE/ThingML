
/****************************************************************/
/*                                                              */
/*  !!! THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT  !!! */
/*                                                              */
/****************************************************************/

import "TestMQTTPorts.thingml"



thing TestMQTTReceiverPort_JavaMqttJson_Impl includes TestMQTTReceiverPort, MQTTAdapterMsgs 
@java_import `import net.sf.json.*;`
@maven_dep `		
       <dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>2.4</version>
            <classifier>jdk15</classifier>
        </dependency>`
{
	
	required port javamqtt 
	@sync_send "true"
	{
		sends mqtt_publish, mqtt_subscribe
		receives mqtt_message, mqtt_connected
	}
	
	function mqtt_subscribe() do
		
	end
	
	function mqtt_parsemsg(topic : String, payload : Buffer, len : UInt32) : Boolean do
	
		`JSONObject json = (JSONObject) JSONSerializer.toJSON(new String(`&payload&`, java.nio.charset.StandardCharsets.UTF_8));`
		`boolean __valid_msg = false;`
		`switch (`&topic&`) {  

			default: break;
		}`

		return `__valid_msg`

	end
	
	
	statechart PosixMQTTJSonSC init Running {
	
		internal event javamqtt?mqtt_connected action mqtt_subscribe()
		internal event m : javamqtt?mqtt_message action mqtt_parsemsg(m.topic, m.payload, m.size)

		internal event e:receiver?no_parameters action do
			// Sending for receiver!no_parameters
			`JSONObject json = new JSONObject();
			`
			javamqtt!mqtt_publish("no_parameters", `json.toString().getBytes()`, `json.toString().length()`)
		end

		internal event e:receiver?some_numbers action do
			// Sending for receiver!some_numbers
			`JSONObject json = new JSONObject();
			json.put("i8", `&e.i8&`);
			json.put("ui8", `&e.ui8&`);
			json.put("i", `&e.i&`);
			json.put("ui", `&e.ui&`);
			json.put("d", `&e.d&`);
			json.put("l", `&e.l&`);
			`
			javamqtt!mqtt_publish("some_numbers", `json.toString().getBytes()`, `json.toString().length()`)
		end

		internal event e:receiver?some_strings action do
			// Sending for receiver!some_strings
			`JSONObject json = new JSONObject();
			json.put("c", `&e.c&`);
			json.put("str", `&e.str&`);
			`
			javamqtt!mqtt_publish("some_strings", `json.toString().getBytes()`, `json.toString().length()`)
		end

		internal event e:receiver?some_bytes action do
			// Sending for receiver!some_bytes
			`JSONObject json = new JSONObject();
			json.put("b1", `&e.b1&`);
			json.put("b2", `&e.b2&`);
			`
			javamqtt!mqtt_publish("some_bytes", `json.toString().getBytes()`, `json.toString().length()`)
		end

		internal event e:receiver?some_enum action do
			// Sending for receiver!some_enum
			`JSONObject json = new JSONObject();
			json.put("d0", `&e.d0&`);
			json.put("d1", `&e.d1&`);
			`
			javamqtt!mqtt_publish("some_enum", `json.toString().getBytes()`, `json.toString().length()`)
		end



		state Running {}
		
	}
}

