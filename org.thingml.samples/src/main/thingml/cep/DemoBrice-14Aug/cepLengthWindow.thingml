datatype Integer<2>
    @js_type "int"
    @java_type "int";

thing fragment Msgs {
    message m1(x: Integer); 
    
    message m2(x: Integer);
    message m3(x: Integer);
    
       
   message cepM1(c: Integer);
   
   message cepM2M3(a: Integer);   
}

thing CepLengthW includes Msgs {
    provided port send {
        sends m1, cepM1   
    }  
    
    required port recv {
        receives m1, cepM1   
    }  
    
    function count_msg(tab: Integer[]) : Integer do
        return tab.length
    end
    
    stream simpleSrc do
        from ss : [recv?m1]::lengthWindow(5)
        select count: count_msg(ss.x[])
        action send!cepM1(count)
    end
    
    statechart CepLengthW init Idle {
        state Idle {
            on entry do
                //First window
                send!m1(1)
                send!m1(1)
                send!m1(1)
                send!m1(1)
                send!m1(1)
                
                //Second Window
                send!m1(1)
                send!m1(1)
                send!m1(1)
                send!m1(1)
                send!m1(1)
                send!m1(1)
                send!m1(1)
            end 
            
           internal
           event e : recv?cepM1
           action print "ok : " + e.c   
        }    
    }
}

configuration lengthCfg {
    instance c : CepLengthW
    connector c.recv => c.send    
}
