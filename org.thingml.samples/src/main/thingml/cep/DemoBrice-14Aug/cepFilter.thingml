/** Expected result:
cepM1 received with value (2)
cepM2M3 received with values (1;2;3)
cepM2M3 received with values (1;2;3)
cepM2M3 received with values (0;6;0)
cepM2M3 received with values (0;6;0)
cepM4M5 received with value (4)
cepM4M5 received with value (4)
**/

datatype Integer<2>
    @js_type "int"
    @java_type "int";
    
datatype Bool<1>
    @js_type "bool"
    @java_type "boolean";

thing fragment Messages {
    //simple source
    message m1(x: Integer);
    
    //merge sources
    message m2(a: Integer, b: Integer, c: Integer);
    message m3(x: Integer, y: Integer, z:Integer);
    
    //join message
    message m4(x: Integer);
    message m5(x: Integer);
}

thing fragment CepMsgs {
    message cepM1(a: Integer);    
    
    message cepM2M3(v1: Integer, v2: Integer, v3:Integer);
    
    message cepM4M5(x: Integer);
}




thing CepFilter includes Messages, CepMsgs{
    provided port send {
        sends m1, cepM1, m2, m3, cepM2M3, m4, m5, cepM4M5
    }
    
    required port recv {
        receives m1, cepM1, m2, m3, cepM2M3, m4, m5, cepM4M5
    }
    
    operator filterSsrc(msg : m1) : Bool do
        return msg.x %2 == 0
    end
    
    stream splSrcFiltered do
        from ssf : [ recv?m1 ]::filter(filterSsrc(ssf))
        select a: ssf.x
        action send!cepM1(a)
    end
    
    operator filterMerge(m: cepM2M3) : Bool do
        return m.v2 %2 == 0
    end
    
    stream mergeFiltered do
        from mge : [ recv?m2 | recv?m3 -> cepM2M3(#0,#1,#2) ]::filter(filterMerge(mge))
        select a: #0, b: #1, c: #2
        action send!cepM2M3(a,b,c)
    end
    
    operator filterM2(msgs: m2) : Bool do
        return (msgs.a + msgs.b + msgs.c) == 6
    end 
    
    stream mergeFilteredSrc do
        from mge : [ e1 : [recv?m2]::filter(filterM2(e1)) | recv?m3 -> cepM2M3(#0,#1,#2) ]::filter(filterMerge(mge))
        select a: #0, b: #1, c: #2
        action send!cepM2M3(a,b,c)
    end
    
    operator filterJoin(m : cepM4M5) : Bool do
        return 'true'
    end
    
    operator filterM5(m : m5) : Bool do
        return m.x == 2
    end
    
    stream joinMsg do
        from jn : [ e1 : recv?m4 & e2 : recv?m5::filter(filterM5(e2)) -> cepM4M5(e2.x * e2.x)]::filter(filterJoin(jn))
        select a: #0
        action send!cepM4M5(a)
    end
    
    statechart CepFilter init Idle {
        state Idle {
            on entry do
                send!m1(1) //does not pass
                send!m1(2)//pass
                
                send!m2(1,2,3)//pass
                send!m3(2,1,3) //does not pass
                send!m2(2,3,0) //does not pass 
                send!m3(0,6,0) //pass  
                
                send!m4(1)
                send!m5(1)
                send!m4(1)
                send!m5(2)
            end    
            
            internal
            event c : recv?cepM1
            action print "cepM1 received with value (" + c.a + ")\n"
            
            internal
            event c : recv?cepM2M3
            action print "cepM2M3 received with values (" + c.v1 + ";" + c.v2 + ";" + c.v3 + ")\n"
            
             internal
            event c : recv?cepM4M5
            action print "cepM4M5 received with value (" + c.x + ")\n"
        }    
    }
    
}

configuration cepFilterCfg {
    instance test : CepFilter 
    connector test.recv => test.send
}
