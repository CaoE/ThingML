import "../datatypes.thingml"
import "../thingml.thingml"



thing fragment DNSSDMsgs {
	message dnssd_srv_publish_success()
		@dnssd_success_callback "dnssd_srv_publish_success"

	message dnssd_srv_publish_failure(code : UInt8)
		@dnssd_failure_callback "dnssd_srv_publish_failure"

	message dnssd_publish_service()
		@dnssd_publish_service "dnssd_publish_service"
		
	message dnssd_unpublish_service()
		@dnssd_unpublish_service "dnssd_unpublish_service"
}

thing fragment DNSSDCtrlMsgs {
	message publish_service()
	message unpublish_service()
	message published_service()
}


thing DNSSDServicePublisher includes DNSSDMsgs, DNSSDCtrlMsgs {

	required port dnssdport {
		sends dnssd_publish_service, dnssd_unpublish_service
		receives dnssd_srv_publish_success, dnssd_srv_publish_failure
	}
	
	provided port ctrlport {
		receives publish_service, unpublish_service
		sends published_service
	}
	
	statechart Behavior init Start {
	
		state Start {
			internal event dnssdport?dnssd_srv_publish_success
			action do
				print "service published\n"
				ctrlport!published_service()
			end
			
			internal event e: dnssdport?dnssd_srv_publish_failure
			action do
				print "failed to publish service " + e.code + "\n"
			end
			
			internal event e: ctrlport?publish_service
			action do
				dnssdport!dnssd_publish_service()
			end
			
			internal event e: ctrlport?unpublish_service
			action do
				dnssdport!dnssd_unpublish_service()
			end
		}
	}
}
