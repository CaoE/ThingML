import "../../thingml.thingml"

thing fragment Msgs {
	message m1();
	message m2();
}

thing TestDisymetricalConnector includes Test, Msgs
@test "12 # IIIII"
{
	provided port p1 {
		sends m1, m2
		receives m1, m2
	}
	provided port p2 {
		sends m1, m2
		receives m1, m2
	}
	
	statechart Chart init Init {
		internal event Test?Done
		action TestDone()
		
		state Init {
			internal event e : Test?In
			guard e.c == '\'1\''	
			action p1!m1()	

			internal event e : Test?In
			guard e.c == '\'2\''		
			action p2!m1()

			internal event p1?m2
			action do
				TestOut('\'I\'')
			end

			internal event p2?m2
			action do
				TestOut('\'I\'')
			end
		}
	}
}

thing T2 includes Msgs {

	required port p1 {
		sends m1, m2
		receives m1, m2
	}
	required port p2 {
		sends m1, m2
		receives m1, m2
	}
	statechart Chart init Init {
		state Init {
			internal event p1?m1
			action p1!m2()

			internal event p2?m1
			action p2!m2()
		}
	}
}

configuration conf {
	instance test : TestDisymetricalConnector
	instance t2 : T2
	
	connector t2.p1 => test.p1
	connector t2.p2 => test.p1
	connector t2.p2 => test.p2
}
